!function(e){var n={};function s(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=n,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)s.d(t,r,function(n){return e[n]}.bind(null,r));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s=7)}([function(e,n,s){s(12).config();const t=s(2),r=void 0!==process.env.SITE_MODE?process.env.SITE_MODE:"DEVELOPMENT",a={uri:{ENDPOINT:process.env.DEV_URI},db:{host:process.env.DEV_DB_HOST,user:process.env.DEV_DB_USER,password:t.decrypt(process.env.DEV_DB_PASS),database:process.env.DEV_DB},mode:"DEVELOPMENT"},o={uri:{ENDPOINT:process.env.STAGING_URI},db:{host:process.env.STAGING_DB_HOST,user:process.env.STAGING_DB_USER,password:t.decrypt(process.env.STAGING_DB_PASS),database:process.env.STAGING_DB},mode:"STAGING"},l={uri:{ENDPOINT:process.env.PROD_URI},db:{host:process.env.PROD_DB_HOST,user:process.env.PROD_DB_USER,password:t.decrypt(process.env.PROD_DB_PASS),database:process.env.PROD_DB},mode:"PRODUCTION"};let i;switch(r){case"DEVELOPMENT":i=a;break;case"STAGING":i=o;break;case"LIVE":i=l;break;default:i=a}e.exports={...i}},function(e,n){e.exports=require("uuid")},function(e,n,s){const t=s(3),r="2e3fa223e381c865cc25a533676b9e12e5eb5588331c32fe229d5088063e1208",a="456fe4efc189c7182278721778199fe3";e.exports={encrypt:(e,n=!1)=>{const s=n?t.randomBytes(16):a;let o=t.createCipheriv("aes-256-cbc",Buffer.from(r,"hex"),n?s:Buffer.from(s,"hex")),l=o.update(e);return l=Buffer.concat([l,o.final()]),{encryptedData:l.toString("hex"),iv:n?s.toString("hex"):""}},decrypt:(e,n=!1)=>{const s=!1===n?a:n;let o=Buffer.from(e,"hex"),l=t.createDecipheriv("aes-256-cbc",Buffer.from(r,"hex"),Buffer.from(s,"hex")),i=l.update(o);return i=Buffer.concat([i,l.final()]),i.toString()},hash:e=>t.createHash("sha256").update(e).digest("hex")}},function(e,n){e.exports=require("crypto")},function(e,n,s){const t=new(s(17).EventEmitter),r=s(3),a=s(18),o=(s(5),s(20)),l=s(21),i="_hjs_722m_GHAE_",u=({session:e,override:n=!1})=>{let s=[],t=[],r=[];return!0===n?{name:s,sql:t,values:r,index:-1}:(s[0]="VALIDATE SESSION",t[0]='\n    SELECT COALESCE(email, "") AS email\n    , COALESCE(token, "") AS token\n    , COALESCE(iv, "") AS iv\n    FROM sessions\n    WHERE token = ?\n  ',r[0]=[e],{name:s,sql:t,values:r,index:0})},c=(e,n,s,t,r)=>{for(let a=1;a<=r;a++)e.push({name:n[a],sql:s[a],values:t[a]});return e};t.on("error",(function(e){console.log("Error: "+e.code)})),e.exports={getSequence:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,birthdate:l=null,timezone:i=null,uid:u=null,status:c=null,reviser:E=null,workplace:p=null})=>{let d=[],S=[],m=[];i=i.slice(5),d[0]="UPDATE users",S[0]="\n    UPDATE users\n    SET sequence = COALESCE(\n        (\n            SELECT seqplus FROM \n            (\n                SELECT MAX(u2.sequence) + 1 as seqplus\n                FROM users AS u2\n                WHERE DATE(u2.birthdate) = DATE(?)\n                AND u2.timezone = ?\n            ) as x\n    \t), 0\n    )\n    WHERE email = ?\n    ",m[0]=[l,i,o],d[1]="SELECT FROM users",S[1]="\n    SELECT sequence\n    FROM users\n    WHERE email = ?\n    ",m[1]=[o];let T=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:o,uid:u,name:d[0],sql:S[0],values:m[0]},{name:d[1],sql:S[1],values:m[1]}];return a.mergeIntoDb(T)},mergeUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:u=(()=>{}),uid:E=null,firstname:p=null,lastname:d=null,email:S=null,newEmail:m=null,birthdate:T=null,timezone:A=null,scode:g=null,tcode:q=null,sequence:C=null,pw:D=null,website:_=null,phone:O=null,acc_curr:I=null,acc_cred:N=null,acc_save:b=null,language:h=null,boost:v=0,status:k=null,validateEmail:L=!1,reviser:R=null,workplace:U=null})=>{let M=[],f=[],y=[],w=-1;if(null===E&&null!==g&&null!==q&&null!==C){const t=o.getChecksum(`${q}${C}`);if(E=`U${g}${parseInt(C).toString(16).padStart(4,"0")}${t}`,!o.validate(E))return void u({req:e,reqData:n,session:s,error:{code:"CHECKSUM_FAILED"},context:["db.js","mergeUser",E]})}null!==m&&null===p&&null===d&&null===D||(w++,M[w]="INSERT INTO users",f[w]="\n    INSERT INTO users (firstname, lastname, email, pw, acc_curr, acc_cred, acc_save, allowance_date, language, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, 0, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    uid = COALESCE(?, uid)\n    , firstname = COALESCE(?, firstname)\n    , lastname = COALESCE(?, lastname)\n    , email = COALESCE(?, email)\n    , pw = COALESCE(?, pw)\n    , birthdate = COALESCE(?, birthdate)\n    , timezone = COALESCE(?, timezone)\n    , website = COALESCE(?, website)\n    , phone = COALESCE(?, phone)\n    , acc_curr = COALESCE(?, acc_curr)\n    , acc_cred = COALESCE(?, acc_cred)\n    , acc_save = COALESCE(?, acc_save)\n    , language = COALESCE(?, language)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",y[w]=[p,d,S,null!==D?l(`${i}${D}`):null,0,0,0,h,R,U,E,p,d,S,null!==D?l(`${i}${D}`):null,T,A,_,O,I,N,b,h,k,R,U]),null!==m&&(w++,M[w]="UPDATE users SET email",f[w]="\n    UPDATE users\n    SET email = ?\n    , status = 0\n    WHERE email = ?\n    ",y[w]=[m,S],w++,M[w]="DELETE FROM validation tokens",f[w]="\n    DELETE FROM validation_tokens\n    WHERE type = 'email'\n    AND email = ?\n    ",y[w]=[S]);let P=null;if(L&&(P=r.randomBytes(64).toString("base64"),w++,M[w]="INSERT INTO validation_tokens",f[w]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",y[w]=[null===m?S:m,P,0,R,U,k,R,U]),v>0){const e="acc_cred";w++,M[w]="UPDATE vault",f[w]="\n      UPDATE vault\n      SET acc = acc - ?,\n      reviser = ?,\n      workplace = ?\n      AND acc - ? >= 0\n      ",y[w]=[v,R,U,v],w++,M[w]="UPDATE recipient",f[w]=`\n    UPDATE users AS u\n    INNER JOIN sessions AS s ON s.email = u.email \n    AND s.token = ?\n    SET u.${e} = u.${e} + ?,\n    u.reviser = ?,\n    u.workplace = ?\n    WHERE u.uid = ?\n    `,y[w]=[s,v,R,U,E],w++,M[w]="INSERT INTO transactions",f[w]="\n    INSERT INTO transactions (type, amount, currency, exchange_rate, comment, created, reviser, workplace)\n    VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), ?, ?)",y[w]=["boost V2U",v,"welcome boost",R,U],w++,M[w]="INSERT INTO transaction_positions",f[w]="\n    INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n    VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)",y[w]=[v,E,"vault",e,R,U]}let x=[{req:e,reqData:n,session:s,onStatusChange:t,onError:u,email:S,tags:{token:P,email:null===m?S:m,language:h},uid:E,name:M[0],sql:f[0],values:y[0]}];return x=c(x,M,f,y,w),a.mergeIntoDb(x)},endSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),token:o=null})=>{let l=[],i=[],u=[];l[0]="UPDATE sessions",i[0]="\n    UPDATE sessions\n    SET token = ''\n    , iv = ''\n    WHERE token = ?\n  ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},mergeSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,token:l=null,iv:i=null,status:u=0})=>{let c=[],E=[],p=[];c[0]="INSERT INTO sessions",E[0]="\n    INSERT INTO sessions (email, token, iv, status, created)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP())\n    ON DUPLICATE KEY UPDATE \n    token = COALESCE(?, token)\n    , iv = COALESCE(?, iv)\n    , status = COALESCE(?, status)\n    , created = UTC_TIMESTAMP()\n  ",p[0]=[o,l,i,u,l,i,u];let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:null,name:c[0],sql:E[0],values:p[0]}];return a.mergeIntoDb(d)},mergeBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,title:l=null,description:i=null,status:E=0,reviser:p=null,workplace:d=null})=>{let{name:S,sql:m,values:T,index:A}=u({session:s});A++,S[A]="INSERT INTO businesses",m[A]="\n    INSERT INTO businesses (title, description, owner_id, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    description = COALESCE(?, description)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",T[A]=[l,i,o,E,p,d,i,E,p,d];let g=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:null,uid:o,name:S[0],sql:m[0],values:T[0]}];return g=c(g,S,m,T,A),a.mergeIntoDb(g)},mergeCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,curr_title:l=null,abbr:i=null,rate:E=null,region:p=null,status:d=0,reviser:S=null,workplace:m=null})=>{let{name:T,sql:A,values:g,index:q}=u({session:s});q++,T[q]="INSERT INTO currencies",A[q]="\n    INSERT INTO currencies (name, abbr, rate, region, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    name = COALESCE(?, name)\n    , abbr = COALESCE(?, abbr)\n    , rate = COALESCE(?, rate)\n    , region = COALESCE(?, region)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",g[q]=[l,i,E,p,d,S,m,l,i,E,p,d,S,m];let C=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:null,uid:o,name:T[0],sql:A[0],values:g[0]}];return C=c(C,T,A,g,q),a.mergeIntoDb(C)},getTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,language:l=null,status:i=null,reviser:u=null,workplace:c=null})=>{let E=[],p=[],d=[];const S=(m=1e5,T=999999,m=Math.ceil(m),T=Math.floor(T),Math.floor(Math.random()*(T-m+1))+m).toString();var m,T;E[0]="INSERT INTO tans",p[0]="\n  INSERT INTO tans (type, email, tan, expiration, status, created, reviser, workplace)\n  VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE), ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  tan = COALESCE(?, tan)\n  , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",d[0]=[o,S,0,u,c,S,0,u,c];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:o,tags:{token:S,email:o,language:l},name:E[0],sql:p[0],values:d[0]}];return a.mergeIntoDb(A)},processTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,tan:l=null,status:i=null,reviser:u=null,workplace:c=null})=>{let E=[],p=[],d=[];E[0]="UPDATE tans",p[0]="\n    UPDATE tans\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND tan = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",d[0]=[1,o,l];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:E[0],sql:p[0],values:d[0]}];return a.mergeIntoDb(S)},saveCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),type:o="default",cartid:l=null,content:i=null,merchant:u=null,customer:c=null,status:E=null,reviser:p=null,workplace:d=null})=>{let S=[],m=[],T=[];S[0]="INSERT INTO carts",m[0]="\n  INSERT INTO carts (type, cartid, content, expiration, merchant, status, created, reviser, workplace)\n  VALUES (?, ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 6 HOUR), ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  customer = COALESCE(?, customer)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",T[0]=[o,l,i,u,0,p,d,c,E,p,d];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:S[0],sql:m[0],values:T[0]}];return a.mergeIntoDb(A)},getCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),customer:o=null,cart:l=null})=>{let{name:i,sql:E,values:p,index:d}=u({session:s});d++,i[d]="SELECT carts",E[d]="\n    SELECT c.type, c.cartid, c.content, c.merchant, c.expiration, c.status, c.created\n    , b.title AS business_title, b.description AS business_description, b.status AS business_status, b.created AS business_created, b.owner_id\n    , u.firstname AS owner_firstname, u.lastname AS owner_lastname, u.email AS owner_email, u.language AS owner_language, u.status AS owner_status\n    FROM carts AS c\n    INNER JOIN businesses AS b ON b.business_id = c.merchant\n    INNER JOIN users AS u ON u.uid = b.owner_id\n    WHERE c.cartid = ?  \n    AND c.expiration >= UTC_TIMESTAMP()\n    AND c.status = 0\n    ",p[d]=[l],d++,i[d]="UPDATE carts",E[d]="\n    UPDATE carts\n    SET customer = ?\n    WHERE cartid = ?  \n    ",p[d]=[o,l];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:E[0],values:p[0]}];return S=c(S,i,E,p,d),a.mergeIntoDb(S)},transferU2S:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,sender_id:l=null,fromAccount:i=null,toAccount:E=null,amount:p=null,reviser:d=null,workplace:S=null})=>{if(p<=0)return void r({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2S","amount <= 0"]});let{name:m,sql:T,values:A,index:g}=u({session:s});g++,m[g]="UPDATE users",T[g]=`\n    UPDATE users\n    SET ${i} = ${i} - ?,\n    ${E} = ${E} + ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${i} - ? >= 0\n    `,A[g]=[p,p,d,S,l,p],g++,m[g]="INSERT INTO transactions",T[g]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",A[g]=[e,p,l],g++,m[g]="INSERT INTO transaction_positions",T[g]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",A[g]=[p,l,i,E];let q=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,uid:o,name:m[0],sql:T[0],values:A[0]}];return q=c(q,m,T,A,g),a.mergeIntoDb(q)},transferU2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,sender_id:l=null,fromAccount:i=null,toAccount:E="acc_curr",recipient_id:p=null,amount:d=null,description:S=null,reviser:m=null,workplace:T=null})=>{if(d<=0)return void r({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2U","amount <= 0"]});let{name:A,sql:g,values:q,index:C}=u({session:s});C++,A[C]="UPDATE sender",g[C]=`\n    UPDATE users\n    SET ${i} = ${i} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${i} - ? >= 0\n    `,q[C]=[d,m,T,l,d],C++,A[C]="UPDATE recipient",g[C]=`\n  UPDATE users\n  SET ${E} = ${E} + ?,\n  reviser = ?,\n  workplace = ?\n  WHERE uid = ?\n  AND acc_curr + acc_cred + acc_save + ? <= 2000 + DATEDIFF(UTC_TIMESTAMP(), created) * 48\n  AND acc_curr + acc_cred + acc_save + ? <= 24000\n  `,q[C]=[d,m,T,p,d,d],C++,A[C]="INSERT INTO transactions",g[C]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",q[C]=[e,d,l,S],C++,A[C]="INSERT INTO transaction_positions",g[C]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",q[C]=[d,p,i,E];let D=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,uid:o,name:A[0],sql:g[0],values:q[0]}];return D=c(D,A,g,q,C),a.mergeIntoDb(D)},transferU2B:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,sender_id:l=null,fromAccount:i=null,toAccount:E="acc_curr",purpose_id:p=null,currency:d="Z",amount:S=null,description:m=null,cart:T=null,merchant:A=null,reviser:g=null,workplace:q=null})=>{if(S<=0)return void r({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2B","amount <= 0"]});let{name:C,sql:D,values:_,index:O}=u({session:s});p.forEach((n,s)=>{O++,C[O]="UPDATE sender",D[O]=`\n      UPDATE users\n      SET ${i[s]} = ${i[s]} - ?,\n      reviser = ?,\n      workplace = ?\n      WHERE uid = ?\n      AND ${i[s]} - ? >= 0\n      `,_[O]=[S[s],g,q,l,S[s]],O++,C[O]="UPDATE shareholders",D[O]=`\n      UPDATE users AS u\n      LEFT JOIN shares AS s1 ON s1.shareholder_id = u.uid\n      LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n      SET u.${E} = u.${E} + ROUND(? /\n        (\n          SELECT SUM(s2.share)\n          FROM shares AS s2\n          WHERE s2.purpose_id = s1.purpose_id\n        ) * s1.share, 5),\n      u.reviser = ?,\n      u.workplace = ?\n      WHERE p.purpose_id = ?\n      `,_[O]=[S[s],g,q,p[s]],O++,C[O]="INSERT INTO transactions",D[O]="\n      INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, purpose_id, merchant, comment, created, reviser, workplace)\n      VALUES (?, ?, ?, (SELECT rate FROM currencies WHERE abbr = ?), ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYS', 'SYSTEM')",_[O]=[e,S[s],d[s],d[s],l,p[s],A,m],O++,C[O]="INSERT INTO transaction_positions",D[O]=`\n      INSERT INTO transaction_positions (transaction_id, amount, recipient_id, roles, share, share_per_cent, from_account, to_account, created, reviser, workplace)\n      SELECT '[INSERT_ID]',\n      (\n        ? /\n        (\n          SELECT SUM(s2.share)\n          FROM shares AS s2 WHERE\n          s2.purpose_id = s1.purpose_id\n        ) * s1.share\n      ) AS amount,\n      s1.shareholder_id, s1.roles, s1.share,\n      (\n        100 /\n        (\n          SELECT SUM(s3.share)\n          FROM shares AS s3 WHERE\n          s3.purpose_id = s1.purpose_id\n        ) * s1.share\n      ) AS share_per_cent,\n      '${i[s]}', '${E}', UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM'\n      FROM shares AS s1\n      LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n      LEFT JOIN users AS u ON u.uid = s1.shareholder_id\n      WHERE s1.purpose_id = ?\n      `,_[O]=[S[s],p[s]]}),null!==T&&(O++,C[O]="UPDATE carts",D[O]="\n      UPDATE carts\n      SET status = 1\n      WHERE cartid = ?\n      AND status = 0\n      ",_[O]=[T]);let I=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,uid:o,name:C[0],sql:D[0],values:_[0]}];return I=c(I,C,D,_,O),a.mergeIntoDb(I)},transferV2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),fromAccount:o="vault",toAccount:l="acc_save",recipient_id:i=null,amount:E=48,description:p="allowance",reviser:d="VAULT",workplace:S="SYSTEM"})=>{if(E<=0)return void r({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferV2U","amount <= 0"]});let{name:m,sql:T,values:A,index:g}=u({session:s});g++,m[g]="UPDATE vault",T[g]="\n    UPDATE vault\n    SET acc = acc - ?,\n    reviser = ?,\n    workplace = ?\n    AND acc - ? >= 0\n    ",A[g]=[E,d,S,E],g++,m[g]="UPDATE recipient",T[g]="\n  UPDATE users AS u\n  INNER JOIN sessions AS s ON s.email = u.email \n  AND s.token = ?\n  SET u.acc_save = u.acc_save + ?,\n  u.allowance_date = DATE(UTC_TIMESTAMP()),\n  u.reviser = ?,\n  u.workplace = ?\n  WHERE u.uid = ?\n  AND (u.allowance_date < DATE(UTC_TIMESTAMP()) OR u.allowance_date IS null)\n  ",A[g]=[s,E,d,S,i],g++,m[g]="INSERT INTO transactions",T[g]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), ?, ?)",A[g]=[e,E,p,d,S],g++,m[g]="INSERT INTO transaction_positions",T[g]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)",A[g]=[E,i,o,l,d,S];let q=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:m[0],sql:T[0],values:A[0]}];return q=c(q,m,T,A,g),a.mergeIntoDb(q)},getUriSettings:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uri:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT FROM uri_settings",i[0]="\n    SELECT settings\n    FROM uri_settings\n    WHERE uri = ?\n    ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},signInUser:({req:e=null,reqData:n=null,session:t=null,onStatusChange:r=(()=>{}),onError:o=(()=>{}),email:u=null,ip:c=null,pw:E=null})=>{const p=c,d=s(22).lookup(p);let S=[],m=[],T=[],A=-1;A++,S[A]="SELECT users",m[A]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.language, u.access, u.status, u.ts,\n    c.name AS currency_name, c.abbr AS currency_abbr, c.rate AS currency_rate, c.status AS currency_status\n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.pw = ?\n    ",T[A]=[u,l(`${i}${E}`)],A++,S[A]="INSERT INTO user_connection",m[A]="\n    INSERT INTO user_connection (\n      email, date, ip, connections, \n      country, region, eu, timezone, city, gps_lat, gps_lon, metro, area, \n      created, reviser, workplace\n    )\n    VALUES (\n      ?, UTC_TIMESTAMP(), ?, 1,\n      ?, ?, ?, ?, ?, ?, ?, ?, ?,\n      UTC_TIMESTAMP(), 'SYS', 'SYSTEM'\n    )\n    ON DUPLICATE KEY UPDATE \n    connections = connections + 1\n    ",T[A]=[u,p,null===d?null:d.country,null===d?null:d.region,null===d?null:d.eu,null===d?"-":d.timezone,null===d?"-":d.city,null===d?null:d.gps_lat,null===d?null:d.gps_lon,null===d?null:d.metro,null===d?"-":d.area];let g=[{req:e,reqData:n,session:t,onStatusChange:r,onError:o,tags:{email:u},name:S[0],sql:m[0],values:T[0]},{name:S[1],sql:m[1],values:T[1]}];return a.mergeIntoDb(g)},resetPassword:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:o=(()=>{}),uid:l=null,email:i=null,status:u=0,language:c=null,reviser:E=null,workplace:p=null})=>{let d=[],S=[],m=[],T=r.randomBytes(64).toString("base64");d[0]="INSERT INTO validation_tokens",S[0]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('password', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    token = COALESCE(?, token)\n    , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",m[0]=[i,T,0,E,p,T,u,E,p];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:o,email:i,tags:{token:T,email:i,language:c},uid:l,name:d[0],sql:S[0],values:m[0]}];return a.mergeIntoDb(A)},getUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT users",i[0]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, c.name AS currency_name, c.abbr AS currency_abbr, u.language, u.status, u.ts \n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.status < 2\n    ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},uploadFile:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{})})=>{let o=[],l=[],i=[];o[0]="SELECT 1",l[0]="SELECT COUNT(*) AS count_users FROM users WHERE status = 1",i[0]=[];let u=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:o[0],sql:l[0],values:i[0]}];return a.mergeIntoDb(u)},getAccount:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null})=>{let{name:l,sql:i,values:E,index:p}=u({session:s});p++,l[p]="SELECT users",i[p]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.access, u.status, u.ts \n    , s.token, s.iv\n    FROM users AS u\n    INNER JOIN sessions AS s ON s.email = u.email \n    WHERE u.uid = ?\n    AND s.token = ?\n    ",E[p]=[o,s];let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:E[0]}];return d=c(d,l,i,E,p),a.mergeIntoDb(d)},getValidateSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{})})=>{let{name:o,sql:l,values:i,index:c}=u({session:s}),E=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:o[0],sql:l[0],values:i[0]}];return a.mergeIntoDb(E)},getBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,page:l=0,limit:i=1})=>{let{name:E,sql:p,values:d,index:S}=u({session:s});S++,E[S]="SELECT businesses",p[S]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE owner_id = ? AND status < 2\n    ORDER BY title\n    LIMIT ? OFFSET ?\n    ",d[S]=[o,i,l*i],S++,E[S]="COUNT businesses",p[S]="\n    SELECT COUNT(*) as count_businesses\n    FROM businesses\n    WHERE owner_id = ?\n  ",d[S]=[o];let m=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:E[0],sql:p[0],values:d[0]}];return m=c(m,E,p,d,S),a.mergeIntoDb(m)},getTopics:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),cat2:o="job-category",cat3:l=null,includeEmpty:i=!1,includeUnpublished:E=!1,search:p="",page:d=0,limit:S=1})=>{let{name:m,sql:T,values:A,index:g}=u({session:s,override:!0});null===l&&(l="%");const q=E?"(j.status = 0 OR j.status = 1)":"j.status = 1";g++,i?(m[g]="SELECT topics",T[g]="\n        SELECT t.id, t.seq, t.cat1, t.cat2, t.cat3, t.topic, t.submitter, t.status, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created\n        , COUNT(j.id) AS count_texts\n        FROM topics AS t\n        LEFT JOIN texts AS j ON j.type = t.cat3\n        WHERE t.cat2 = ?\n        AND t.cat3 LIKE ?\n        GROUP BY t.cat3\n        ORDER BY t.seq, t.topic\n        LIMIT ? OFFSET ?\n        ",A[g]=[o,l,S,d*S]):""===p?(m[g]="SELECT topics",T[g]=`\n          SELECT t.id, t.seq, t.cat1, t.cat2, t.cat3, t.topic, t.submitter, t.status, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created\n          , COUNT(j.id) AS count_texts\n          FROM topics AS t\n          LEFT JOIN texts AS j ON j.type = t.cat3\n          WHERE t.cat2 = ?\n          AND ${q}\n          GROUP BY t.cat3\n          HAVING count_texts > 0\n          ORDER BY t.seq, t.topic\n          LIMIT ? OFFSET ?\n          `,A[g]=[o,S,d*S]):(m[g]="SELECT topics",T[g]=`\n        SELECT t.id, t.seq, t.cat1, t.cat2, t.cat3, t.topic, t.submitter, t.status, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created\n        , COUNT(j.id) AS count_texts\n        FROM topics AS t\n        LEFT JOIN texts AS j ON j.type = t.cat3\n        WHERE t.cat2 = ?\n        AND t.cat3 LIKE ?\n        AND MATCH(j.title, j.description) AGAINST (? IN BOOLEAN MODE)\n        AND ${q}\n        GROUP BY t.cat3\n        HAVING count_texts > 0\n        ORDER BY t.seq, t.topic\n        LIMIT ? OFFSET ?\n        `,A[g]=[o,l,p,S,d*S]),g++,i?(m[g]="COUNT topics",T[g]="\n    SELECT COUNT(*) as count_topics\n    FROM topics\n    WHERE cat2 = ?\n    AND cat3 LIKE ?\n  ",A[g]=[o,l]):""===p?(m[g]="COUNT topics",T[g]=`\n    SELECT COUNT(*) as count_topics\n    FROM topics\n    WHERE cat2 = ?\n    AND cat3 IN (\n      SELECT j.type \n      FROM texts AS j\n      WHERE j.title LIKE '%'\n      AND ${q}\n    )\n  `,A[g]=[o]):(m[g]="COUNT topics",T[g]=`\n    SELECT COUNT(*) as count_topics\n    FROM topics\n    WHERE cat2 = ?\n    AND cat3 IN (\n      SELECT j.type \n      FROM texts AS j\n      WHERE MATCH(j.title, j.description) AGAINST (? IN BOOLEAN MODE)\n      AND ${q}\n    )\n  `,A[g]=[o,p]);let C=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:m[0],sql:T[0],values:A[0]}];return C=c(C,m,T,A,g),a.mergeIntoDb(C)},getBusinessById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT businesses",i[0]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE id = ? AND status < 2\n    ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},getCartPurposes:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),purposes:o=null,language:l=null,page:i=0,limit:u=5})=>{let c=[],E=[],p=[];const d=JSON.parse(o);c[0]="SELECT purposes",E[0]="\n    SELECT p.business_id, p.purpose_id, p.title, p.description, '' AS link, '' AS image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM purposes AS p\n    WHERE p.purpose_id IN (?) \n    AND p.status = 1\n    ORDER BY p.title\n    LIMIT ? OFFSET ?\n    ",p[0]=[d,u,i*u],c[1]="COUNT purposes",E[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE purpose_id IN (?)\n    AND status = 1\n  ",p[1]=[d];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:c[0],sql:E[0],values:p[0]},{name:c[1],sql:E[1],values:p[1]}];return a.mergeIntoDb(S)},getPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),business_id:o=null,language:l=null,search:i="%",page:E=0,limit:p=5})=>{null===i&&(i="*"),(i=i.split("*").join("%")).indexOf("%")<0&&(i=`%${i}%`);let{name:d,sql:S,values:m,index:T}=u({session:s});T++,d[T]="SELECT purposes",S[T]="\n  SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n  , p.title, p.description, p.keywords\n  FROM purposes AS p\n  WHERE p.business_id = ?\n  AND p.status < 2\n  AND (\n    p.title LIKE ?\n    OR p.description LIKE ?\n    OR p.keywords LIKE ?\n    OR p.purpose_id LIKE ?\n  )\n  ORDER BY p.title\n  LIMIT ? OFFSET ?\n    ",m[T]=[o,i,i,i,i,p,E*p],T++,d[T]="COUNT purposes",S[T]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE business_id = ?\n    AND status < 2\n    AND (\n      title LIKE ?\n      OR description LIKE ?\n      OR keywords LIKE ?\n      OR purpose_id LIKE ?\n    )\n  ",m[T]=[o,i,i,i,i];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:d[0],sql:S[0],values:m[0]}];return A=c(A,d,S,m,T),a.mergeIntoDb(A)},getPurposeById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null,language:l=null})=>{let i=[],u=[],c=[];i[0]="SELECT purposes",u[0]="\n    SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    , p.title, p.description, p.keywords\n    FROM purposes AS p\n    WHERE p.id = ? \n    AND p.status < 2\n    ",c[0]=[o];let E=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:u[0],values:c[0]}];return a.mergeIntoDb(E)},getShare:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),purpose_id:o=null})=>{let{name:l,sql:i,values:E,index:p}=u({session:s});p++,l[p]="SELECT shares",i[p]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.purpose_id = ? \n    AND s.status < 2\n    AND u.status < 2\n    ",E[p]=[o];let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:E[0]}];return d=c(d,l,i,E,p),a.mergeIntoDb(d)},getShareholderById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT shares",i[0]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.id = ?  \n    AND s.status < 2\n    AND u.status < 2\n    ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},getCurrencyById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT currencies",i[0]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies as c\n    LEFT JOIN currency_sponsors as cs ON cs.abbr = c.abbr\n    WHERE c.id = ?  \n    AND c.status < 2\n    GROUP BY c.abbr\n    ",u[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)},getTransactionById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null,language:l=null})=>{let i=[],u=[],c=[];i[0]="SELECT transaction_positions",u[0]="\n    SELECT (tp.amount * t.exchange_rate) as conv_amount, tp.to_account, tp.roles, tp.share, tp.share_per_cent,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created,\n    u.firstname, u.lastname, u.status AS sender_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS u ON u.uid = t.sender_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.id = ?\n    ",c[0]=[o];let E=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:u[0],values:c[0]}];return a.mergeIntoDb(E)},getCurrencies:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,search:l="%",page:i=0,limit:E=5})=>{null===l&&(l="*"),(l=l.split("*").join("%")).indexOf("%")<0&&(l=`%${l}%`);let{name:p,sql:d,values:S,index:m}=u({session:s});m++,p[m]="SELECT currencies",d[m]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM currencies AS c\n    LEFT JOIN users AS u ON u.currency_id = c.abbr AND u.uid = ?\n    WHERE (\n      c.name LIKE ?\n      OR c.abbr LIKE ?\n      OR c.region LIKE ?\n    )\n    AND c.status < 2\n    GROUP BY c.abbr\n    ORDER BY u.currency_id DESC, c.abbr\n    LIMIT ? OFFSET ?\n    ",S[m]=[o,l,l,l,E,i*E],m++,p[m]="COUNT currencies",d[m]="\n    SELECT COUNT(*) count_currencies \n    FROM currencies\n    WHERE \n      name LIKE ?\n      OR abbr LIKE ?\n      OR region LIKE ?\n    AND status < 2;\n  ",S[m]=[l,l,l];let T=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:p[0],sql:d[0],values:S[0]}];return T=c(T,p,d,S,m),a.mergeIntoDb(T)},getTransactions:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,language:l=null,dateStart:i=null,dateEnd:E=null,search:p="%",page:d=0,limit:S=5})=>{""===i&&(i=null),""===E&&(E=null),null===p&&(p="*"),(p=p.split("*").join("%")).indexOf("%")<0&&(p=`%${p}%`);let{name:m,sql:T,values:A,index:g}=u({session:s});g++,m[g]="SELECT transactions",T[g]="\n  SELECT *\n  FROM (\n    SELECT 'sender' AS tid, (tp.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, tp.recipient_id, tp.roles, tp.share, tp.share_per_cent, \n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.recipient_id = ?\n    AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n    AND ( \n      t.comment LIKE ?\n      OR t.purpose_id LIKE ?\n      OR us.firstname LIKE ?\n      OR us.lastname LIKE ?\n      OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n    )\n\n    UNION ALL\n\n    SELECT 'receiver' AS tid, (t.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, '-' AS recipient_id, '-' AS roles, '-' AS share, '-' AS share_per_cent,\n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transactions AS t\n    LEFT JOIN transaction_positions AS tp ON tp.transaction_id = t.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE t.sender_id = ?\n    AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n    AND ( \n      t.comment LIKE ?\n      OR t.purpose_id LIKE ?\n      OR ur.firstname LIKE ?\n      OR ur.lastname LIKE ?\n      OR CONCAT(ur.firstname, \" \", ur.lastname) LIKE ?\n    )\n    GROUP BY tp.transaction_id\n    \n  ) a\n  ORDER BY created DESC, conv_amount\n  LIMIT ? OFFSET ?\n    ",A[g]=[o,i,E,p,p,p,p,p,o,i,E,p,p,p,p,p,S,d*S],g++,m[g]="COUNT transactions",T[g]="\n    SELECT\n    (\n      SELECT COUNT(*)\n      FROM transaction_positions AS tp\n      LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n      LEFT JOIN users AS us ON us.uid = t.sender_id\n      WHERE tp.recipient_id = ?\n      AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n      AND ( \n        t.comment LIKE ?\n        OR t.purpose_id LIKE ?\n        OR us.firstname LIKE ?\n        OR us.lastname LIKE ?\n        OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n      )\n    ) +\n    (\n      SELECT COUNT(*)\n      FROM transactions AS t\n      LEFT JOIN users AS us ON us.uid = t.sender_id\n      WHERE t.sender_id = ?\n      AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n      AND ( \n        t.comment LIKE ?\n        OR t.purpose_id LIKE ?\n        OR us.firstname LIKE ?\n        OR us.lastname LIKE ?\n        OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n      )\n    )\n    AS count_transaction_positions\n  ",A[g]=[o,i,E,p,p,p,p,p,o,i,E,p,p,p,p,p];let q=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:m[0],sql:T[0],values:A[0]}];return q=c(q,m,T,A,g),a.mergeIntoDb(q)},getShares:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,language:l=null,search:i="%",page:E=0,limit:p=5})=>{null===i&&(i="*"),(i=i.split("*").join("%")).indexOf("%")<0&&(i=`%${i}%`);let{name:d,sql:S,values:m,index:T}=u({session:s});T++,d[T]="SELECT shares",S[T]="\n    SELECT s.shareholder_id, s.purpose_id, s.title AS shares_title, s.description AS shares_description, s.roles AS shares_roles, s.share AS shares_share, s.status AS shares_status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as shares_created,\n    p.title AS purpose_title, p.description AS purpose_description, '' AS purpose_link, '' AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    o.uid AS owner_uid, o.firstname AS owner_firstname, o.lastname AS owner_lastname, o.status AS owner_status,\n    (\n      100 / \n      (\n        SELECT SUM(s2.share) \n        FROM shares AS s2 \n        WHERE s2.purpose_id = s.purpose_id\n      ) * s.share\n    ) AS share_per_cent\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    LEFT JOIN users as o ON o.uid = b.owner_id\n    WHERE s.shareholder_id = ?\n    AND s.status < 2\n    AND (\n      b.title LIKE ?\n      OR p.title LIKE ?\n      OR s.roles LIKE ?\n    )\n    ORDER BY shares_created DESC, shares_title\n    LIMIT ? OFFSET ?\n    ",m[T]=[o,i,i,i,p,E*p],T++,d[T]="COUNT shares",S[T]="\n    SELECT COUNT(*) as count_shares\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE s.shareholder_id = ?\n    AND s.status < 2\n    AND (\n      b.title LIKE ?\n      OR p.title LIKE ?\n      OR s.roles LIKE ?\n    )\n  ",m[T]=[o,i,i,i];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:d[0],sql:S[0],values:m[0]}];return A=c(A,d,S,m,T),a.mergeIntoDb(A)},updatePurposeProps:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),purpose_id:o=null,language:l=null,title:i=null,description:E=null,category:p=null,subcategory:d=null,subcategory2:S=null,keywords:m=null,link:T=null,image:A=null,status:g=0,reviser:q=null,workplace:C=null})=>{let{name:D,sql:_,values:O,index:I}=u({session:s});I++,D[I]="MERGE purpose_props",_[I]="\n  UPDATE purposes SET\n  title = COALESCE(?, title), \n  description = COALESCE(?, description), \n  keywords = COALESCE(?, keywords), \n  status = status = COALESCE(?, status),\n  reviser = COALESCE(?, reviser), \n  workplace = COALESCE(?, workplace)\n  WHERE purpose_id = ?\n  ",O[I]=[i,E,m,g,q,C,o];let N=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:D[0],sql:_[0],values:O[0]}];return N=c(N,D,_,O,I),a.mergeIntoDb(N)},addPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,language:l=null,business_id:i=null,purpose_id:E=null,title:p=null,description:d=null,category:S=null,subcategory:m=null,subcategory2:T=null,keywords:A=null,link:g=null,image:q=null,status:C=0,reviser:D=null,workplace:_=null})=>{let{name:O,sql:I,values:N,index:b}=u({session:s});b++,O[b]="INSERT INTO purposes",I[b]="\n  INSERT INTO purposes (business_id, purpose_id, title, description, keywords, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",N[b]=[i,E,p,d,A,C,D,_];let h=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:null,uid:o,name:O[0],sql:I[0],values:N[0]}];return h=c(h,O,I,N,b),a.mergeIntoDb(h)},changePurposeStatus:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),purpose_id:o=null,status:l=0,reviser:i=null,workplace:u=null})=>{let c=[],E=[],p=[];c[0]="UPDATE purposes",E[0]="\n  UPDATE purposes\n  SET status = ?\n  WHERE purpose_id = ?\n  ",p[0]=[l,o];let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:c[0],sql:E[0],values:p[0]}];return a.mergeIntoDb(d)},mergeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,purpose_id:l=null,shareholder_id:i=null,roles:E=null,share:p=null,title:d=null,description:S=null,status:m=0,reviser:T=null,workplace:A=null})=>{let{name:g,sql:q,values:C,index:D}=u({session:s});D++,g[D]="INSERT INTO shares",q[D]="\n  INSERT INTO shares (purpose_id, shareholder_id, title, description, roles, share, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , roles = COALESCE(?, roles)\n  , share = COALESCE(?, share)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)",C[D]=[l,i,d,S,E,p,m,T,A,d,S,E,p,m,T,A];let _=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,email:null,uid:o,name:g[0],sql:q[0],values:C[0]}];return _=c(_,g,q,C,D),a.mergeIntoDb(_)},removeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null,purpose_id:l=null,shareholder_id:i=null,reviser:u=null,workplace:c=null})=>{let E=[],p=[],d=[];E[0]="UPDATE shares",p[0]="\n  UPDATE shares\n  SET share = ?\n  , status = ?\n  WHERE purpose_id = ? AND shareholder_id = ?\n  ",d[0]=[0,2,l,i];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:E[0],sql:p[0],values:d[0],uid:o,email:null}];return a.mergeIntoDb(S)},saveMessage:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),sender:o=null,language:l=null,subject:i=null,message:E=null,reviser:p=null,workplace:d=null})=>{let{name:S,sql:m,values:T,index:A}=u({session:s});A++,S[A]="INSERT INTO contact",m[A]="\n  INSERT INTO contact (sender, subject, message, language, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",T[A]=[o,i,E,l,p,d];let g=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:S[0],sql:m[0],values:T[0]}];return g=c(g,S,m,T,A),a.mergeIntoDb(g)},saveArticle:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),language:o=null,type:l=null,path1:i=null,path2:E=null,path3:p=null,link:d=null,title:S=null,text:m=null,submitter:T=null,status:A=null,reviser:g=null,workplace:q=null})=>{let{name:C,sql:D,values:_,index:O}=u({session:s});O++,C[O]="INSERT INTO articles",D[O]="\n  INSERT INTO articles (language, type, path1, path2, path3, link, title, text, submitter, status, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  language = COALESCE(?, language)\n  , type = COALESCE(?, type)\n  , path1 = COALESCE(?, path1)\n  , path2 = COALESCE(?, path2)\n  , path3 = COALESCE(?, path3)\n  , link = COALESCE(?, link)\n  , title = COALESCE(?, title)\n  , text = COALESCE(?, text)\n  , submitter = COALESCE(?, submitter)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",_[O]=[o,l,i,E,p,d,S,m,T,A,g,q,o,l,i,E,p,d,S,m,T,A,g,q];let I=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:C[0],sql:D[0],values:_[0]}];return I=c(I,C,D,_,O),a.mergeIntoDb(I)},saveText:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null,language:l=null,type:i=null,title:E=null,appetizer:p=null,description:d=null,submitter:S=null,status:m=null,reviser:T=null,workplace:A=null})=>{let{name:g,sql:q,values:C,index:D}=u({session:s});D++,g[D]="INSERT INTO texts",q[D]="\n  INSERT INTO texts (id, language, title, appetizer, type, description, submitter, status, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  language = COALESCE(?, language)\n  , title = COALESCE(?, title)\n  , appetizer = COALESCE(?, appetizer)\n  , type = COALESCE(?, type)\n  , description = COALESCE(?, description)\n  , submitter = COALESCE(?, submitter)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",C[D]=[o,l,E,p,i,d,S,m,T,A,l,E,p,i,d,S,m,T,A];let _=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:g[0],sql:q[0],values:C[0]}];return _=c(_,g,q,C,D),a.mergeIntoDb(_)},saveHelp:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),id:o=null,language:l=null,title:i=null,type:E=null,description:p=null,submitter:d=null,status:S=null,reviser:m=null,workplace:T=null})=>{let{name:A,sql:g,values:q,index:C}=u({session:s});C++,A[C]="INSERT INTO texts",g[C]="\n  INSERT INTO texts (id, language, title, type, description, submitter, status, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  language = COALESCE(?, language)\n  , title = COALESCE(?, title)\n  , type = COALESCE(?, type)\n  , description = COALESCE(?, description)\n  , submitter = COALESCE(?, submitter)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",q[C]=[o,l,i,E,p,d,S,m,T,l,i,E,p,d,S,m,T];let D=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:A[0],sql:g[0],values:q[0]}];return D=c(D,A,g,q,C),a.mergeIntoDb(D)},updateTexts:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),jobs:o=null})=>{let{name:l,sql:i,values:E,index:p}=u({session:s});o.map((e,n)=>{const s=e,{id:t,title:r}=s;p++,l[p]="UPDATE texts",i[p]="\n        UPDATE texts \n        SET title = ?,\n        seq = ?\n        WHERE id = ?\n        ",E[p]=[r,n,t]});let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:E[0]}];return d=c(d,l,i,E,p),a.mergeIntoDb(d)},updateHelp:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),jobs:o=null})=>{let{name:l,sql:i,values:E,index:p}=u({session:s});o.map((e,n)=>{const s=e,{id:t,title:r}=s;p++,l[p]="UPDATE texts",i[p]="\n        UPDATE texts \n        SET title = ?,\n        seq = ?\n        WHERE id = ?\n        ",E[p]=[r,n,t]});let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:l[0],sql:i[0],values:E[0]}];return d=c(d,l,i,E,p),a.mergeIntoDb(d)},saveTopics:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),cat1:o=null,cat2:l=null,topics:i=null,submitter:E=null,status:p=0,reviser:d=null,workplace:S=null})=>{let{name:m,sql:T,values:A,index:g}=u({session:s});i.map((e,n)=>{const s=JSON.parse(e),{id:t,topic:r,cat3:a}=s;"new-category"!==r&&(g++,m[g]="INSERT INTO topics",T[g]="\n        INSERT INTO topics (id, seq, cat1, cat2, cat3, topic, submitter, status, created, reviser, workplace )\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n        ON DUPLICATE KEY UPDATE\n        seq = COALESCE(?, seq)\n        , cat3 = COALESCE(?, cat3)\n        , topic = COALESCE(?, topic)\n        ",A[g]=[t,n,o,l,a,r,E,p,d,S,n,a,r])});let q=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:m[0],sql:T[0],values:A[0]}];return q=c(q,m,T,A,g),a.mergeIntoDb(q)},getArticle:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),type:o=null,link:l=null,language:i=null})=>{let{name:E,sql:p,values:d,index:S}=u({session:s});S++,E[S]="SELECT FROM articles",p[S]="\n  SELECT id, language, type, path1, path2, path3, link, title, text, submitter, created, ts\n  FROM articles\n  WHERE type = ?\n  AND link = ?\n  AND language = ?\n  AND status = 0\n  ",d[S]=[o,l,i];let m=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:E[0],sql:p[0],values:d[0]}];return m=c(m,E,p,d,S),a.mergeIntoDb(m)},getText:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),textid:o=null,language:l=null})=>{let{name:i,sql:E,values:p,index:d}=u({session:s,override:!0});d++,i[d]="SELECT FROM texts",E[d]="\n  SELECT id, textid, language, type, title, appetizer, description, submitter, status, created, ts\n  FROM texts\n  WHERE textid = ?\n  AND language = ?\n  AND status = 0\n  ",p[d]=[o,l];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:E[0],values:p[0]}];return S=c(S,i,E,p,d),a.mergeIntoDb(S)},getTextsList:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),cat2:o=null,type:l=null,includeUnpublished:i=!1,language:E=null,search:p="",page:d=0,limit:S=5})=>{let{name:m,sql:T,values:A,index:g}=u({session:s,override:!0});""!==l&&null!==l||(l="%");const q=i?"(t.status = 0 OR t.status = 1)":"t.status = 1";g++,m[g]="SELECT FROM texts",""===p?(T[g]=`\n      SELECT t.id, t.textid, t.language, t.seq, t.title, t.appetizer, t.type, t.submitter, t.status, t.created, t.ts\n      FROM texts AS t\n      LEFT JOIN topics AS p ON p.cat3 = t.type\n      WHERE t.type LIKE ?\n      AND t.language = ?\n      AND ${q}\n      AND p.cat2 = ?\n      ORDER BY t.seq, t.title\n      LIMIT ? OFFSET ?\n      `,A[g]=[l,E,o,S,d*S]):(T[g]=`\n    SELECT t.id, t.textid, t.language, t.seq, t.title, t.appetizer, t.type, t.submitter, t.status, t.created, t.ts\n    FROM texts AS t\n    LEFT JOIN topics AS p ON p.cat3 = t.type\n    WHERE MATCH(t.title, t.description) AGAINST (? IN BOOLEAN MODE)\n    AND t.type LIKE ?\n    AND t.language = ?\n    AND ${q}\n    AND p.cat2 = ?\n    ORDER BY t.seq, t.title\n    LIMIT ? OFFSET ?\n    `,A[g]=[p,l,E,o,S,d*S]),g++,m[g]="COUNT texts",""===p?(T[g]=`\n      SELECT COUNT(*) count_texts \n      FROM texts AS t\n      LEFT JOIN topics AS p ON p.cat3 = t.type\n      WHERE t.type LIKE ?\n      AND t.language = ?\n      AND ${q}\n      AND p.cat2 = ?\n    `,A[g]=[l,E,o]):(T[g]=`\n    SELECT COUNT(*) count_texts \n    FROM texts AS t\n    LEFT JOIN topics AS p ON p.cat3 = t.type\n    WHERE MATCH(t.title, t.description) AGAINST (? IN BOOLEAN MODE)\n    AND t.type LIKE ?\n    AND t.language = ?\n    AND ${q}\n    AND p.cat2 = ?\n  `,A[g]=[p,l,E,o]);let C=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:m[0],sql:T[0],values:A[0]}];return C=c(C,m,T,A,g),a.mergeIntoDb(C)},getHelpList:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),type:o=null,language:l=null,search:i="",page:E=0,limit:p=5})=>{let{name:d,sql:S,values:m,index:T}=u({session:s,override:!0});""===i&&(i="job*"),""===o&&(o="%"),T++,d[T]="SELECT FROM texts",S[T]="\n  SELECT id, textid, language, seq, title, type, submitter, status, created, ts\n  FROM texts\n  WHERE MATCH(title, description) AGAINST (? IN BOOLEAN MODE)\n  AND type LIKE ?\n  AND language = ?\n  AND status = 0\n  ORDER BY seq, title\n  LIMIT ? OFFSET ?\n  ",m[T]=[i,o,l,p,E*p],T++,d[T]="COUNT texts",S[T]="\n    SELECT COUNT(*) count_texts \n    FROM texts\n    WHERE MATCH(title, description) AGAINST (? IN BOOLEAN MODE)\n    AND type LIKE ?\n    AND language = ?\n    AND status = 0\n  ",m[T]=[i,""!==o?o:null,l];let A=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:d[0],sql:S[0],values:m[0]}];return A=c(A,d,S,m,T),a.mergeIntoDb(A)},mergeUserLanguage:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,language:l=null})=>{let i=[],u=[],c=[];i[0]="UPDATE users",u[0]="\n    UPDATE users \n    SET language = ?\n    WHERE email = ?\n    ",c[0]=[l,o];let E=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:u[0],values:c[0]}];return a.mergeIntoDb(E)},mergeUserCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,currency_id:l=null})=>{let{name:i,sql:E,values:p,index:d}=u({session:s});d++,i[d]="UPDATE users",E[d]="\n    UPDATE users \n    SET currency_id = ?\n    WHERE email = ?\n    ",p[d]=[l,o];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:E[0],values:p[0]}];return S=c(S,i,E,p,d),a.mergeIntoDb(S)},validateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),token:o=null,email:l=null})=>{let i=[],u=[],E=[],p=-1;p++,i[p]="UPDATE validation tokens",u[p]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",E[p]=[1,l,o],p++,i[p]="UPDATE users",u[p]="\n    UPDATE users\n    SET status = ?\n    WHERE email = ? \n    ",E[p]=[1,l];let d=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:u[0],values:E[0]}];return d=c(d,i,u,E,p),a.mergeIntoDb(d)},resendValidateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),email:o=null,token:l=null,language:i=null})=>{let u=[],E=[],p=[],d=-1;d++,u[d]="UPDATE validation tokens",E[d]="\n    UPDATE validation_tokens\n    SET resent = resent + 1\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ?\n    AND status = 0\n    AND expiration >= UTC_TIMESTAMP()\n    ",p[d]=[o,l],d++,u[d]="SELECT validation_tokens",E[d]="\n    SELECT resent\n    FROM validation_tokens\n    WHERE email = ?\n    AND type = 'email' \n    ",p[d]=[o];let S=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,tags:{token:l,email:o,language:i},name:u[0],sql:E[0],values:p[0]}];return S=c(S,u,E,p,d),a.mergeIntoDb(S)},validatePasswordResetToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),token:o=null,email:l=null})=>{let i=[],u=[],c=[];i[0]="UPDATE validation tokens",u[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'password'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,l,o];let E=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,name:i[0],sql:u[0],values:c[0]}];return a.mergeIntoDb(E)},unknownRequest:({req:e=null,reqData:n=null,session:s=null,onStatusChange:t=(()=>{}),onError:r=(()=>{}),uid:o=null})=>{let l=[],i=[],u=[];l[0]="SELECT unknown request",i[0]="SELECT 'unknown request' AS error",u[0]=[];let c=[{req:e,reqData:n,session:s,onStatusChange:t,onError:r,uid:o,name:l[0],sql:i[0],values:u[0]}];return a.mergeIntoDb(c)}}},function(e,n){e.exports={dbMergeFlags:{ALLOW_UNCHANGED_ROWS:1}}},function(e,n){const s=e=>(e.status="error",e);e.exports={process:e=>{let n=e.type;switch(console.log("PROCESS TYPE: ",n),n){case"userRequest":return s(e)}return!1}}},function(e,n,s){(function(e){const n="Suranadira"!==s(8).hostname(),t=s(9),r=t(),a=s(10).Server(r),o=s(11)(a,{serveClient:!1,reconnection:!0,reconnectionDelay:1e3,reconnectionDelayMax:5e3,reconnectionAttempts:1/0}),{v4:l}=s(1),i=s(0).uri.ENDPOINT;o.setMaxListeners(0);const u=s(13);global.appRoot=u.resolve(e);const c=s(14);a.listen(n?443:9e3),r.use(t.static(e+"/_client/static")),r.use(t.json()),r.use(t.urlencoded({extended:!0}));const E=[],p=e=>{!1!==e&&(console.log("SENDING",e,"TO",e.session),o.in(e.session).emit("onDataReceived",e),void 0!==e.socketAction&&void 0!==e.socketAction.closeSocket&&d(e.socketAction.closeSocket))},d=e=>{o.of("/").in(e).clients((n,s)=>{if(n)throw n;s.forEach(n=>o.sockets.sockets[n].leave(e))})};r.post("/ip",(function(e,n){const s=e.headers["x-forwarded-for"]||e.connection.remoteAddress||e.socket.remoteAddress||(e.connection.socket?e.connection.socket.remoteAddress:null);n.send({ip:s})})),r.post("/auth",(function(e,n){const s=l(),t=void 0!==e.body.merchant?e.body.merchant:"",r=void 0!==e.body.cart?e.body.cart:"",a={cartid:s,content:r,merchant:t,reviser:"SYS",workplace:"SYSTEM"};c.userRequest({data:{req:"save cart",session:null,data:a},onResult:()=>{}}),n.redirect(`${i}/auth?cart=${s}`)})),r.get("/",(function(e,n){const s=u.resolve("public/index.html");n.sendFile(s,(function(e){e&&n.status(500).send(e)}))})),r.get("*",(function(e,n){const s=u.resolve("./_client/index.html");console.log("resolvedPath:",s),n.sendFile(s,(function(e){e&&n.status(500).send(e)}))})),o.on("connection",e=>{E.push(e),e.on("start session",(function(n){e.join(n.session),n.status="success",n.socketId=e.id,n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),console.log("Socket started the session",n.session),console.log("ROOMS:",E[0].adapter.rooms)})),e.on("end session",(function(n){n.status="success",n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),e.leave(n.session),console.log("Socket ended the session",n.session)})),e.on("disconnect",()=>{console.log("Got disconnect!");const n=E.indexOf(e);E.splice(n,1)}),e.on("onDataReceived",e=>{c.userRequest({data:e,onResult:p})})})}).call(this,"/")},function(e,n){e.exports=require("os")},function(e,n){e.exports=require("express")},function(e,n){e.exports=require("http")},function(e,n){e.exports=require("socket.io")},function(e,n){e.exports=require("dotenv")},function(e,n){e.exports=require("path")},function(e,n,s){const t=s(15),r=s(16),{v4:a}=s(1),o=s(4),l=s(6),i=s(23);let u=null;const c=e=>{let n;e.type="userRequest",n=i.process(e),console.log("processEvent response: ",n),!1!==n&&u(n)},E=e=>{console.log("onError: ",e),e.type="userRequest",res=l.process(e),!1!==res&&(console.log("emit onDataReceived: ",res),u(res))};e.exports={userRequest:e=>{data=e.data,u=e.onResult;const n=data.data,s={session:data.session,reqData:n,onStatusChange:c,onError:E};switch(data.req){case"get account data":o.getAccount({req:data.req,...s,uid:n.uid});break;case"dispatch daily allowance":o.transferV2U({req:"transfer V2U",...s,recipient_id:n.uid});break;case"get transactions":o.getTransactions({req:data.req,...s,uid:n.uid,language:n.language,dateStart:n.dateStart,dateEnd:n.dateEnd,search:n.search,page:n.page-1,limit:n.limit});break;case"get shares":o.getShares({req:data.req,...s,uid:n.uid,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"sign in user":o.getUriSettings({req:"get uri settings",...s,uri:n.uri}),o.signInUser({req:data.req,...s,email:n.email,pw:n.password,ip:n.ip});break;case"register user":o.mergeUser({req:data.req,...s,firstname:n.firstName,lastname:n.lastName,email:n.email,pw:n.password,language:n.language,validateEmail:n.validateEmail,reviser:n.reviser,workplace:n.workplace});break;case"change password":o.mergeUser({req:data.req,...s,email:n.email,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"get user sequence":o.getSequence({req:data.req,...s,email:n.email,birthdate:n.birthDate,timezone:n.timezone,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"register account":o.mergeUser({req:data.req,...s,email:n.email,birthdate:n.birthDate,timezone:n.timezone,scode:n.scode,tcode:n.tcode,sequence:n.sequence,boost:1e3,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"update user":o.mergeUser({req:data.req,...s,email:n.email,newEmail:void 0===n.newEmail?null:n.newEmail,validateEmail:n.validateEmail,uid:n.personalID,firstname:n.firstName,lastname:n.lastName,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"validate email token":o.validateEmailToken({req:data.req,...s,token:n.token,email:n.email});break;case"resend validate email token":o.resendValidateEmailToken({req:data.req,...s,email:n.email,token:n.token,language:n.language});break;case"validate password reset token":o.validatePasswordResetToken({req:data.req,...s,token:n.token,email:n.email});break;case"reset password":o.resetPassword({req:data.req,...s,email:n.email,language:n.language});break;case"upload file":const e=n.acceptedFiles[0],l=data.session,i=global.appRoot+"/uploads/"+l,u=a();t.existsSync(i)||t.mkdirSync(i),r.fromBuffer(e).then(n=>{let r=n.ext;t.writeFile(i+"/"+u+"."+r,e,e=>{if(e)return console.log(e);o.uploadFile({req:data.req,...s})})});break;case"get user":o.getUser({req:data.req,...s,email:n.email});break;case"get currencies":o.getCurrencies({req:data.req,...s,uid:n.uid,search:n.search,page:n.page-1,limit:n.limit});break;case"register user language":o.mergeUserLanguage({req:data.req,...s,email:n.email,language:n.language});break;case"register user currency":o.mergeUserCurrency({req:data.req,...s,email:n.email,currency_id:n.currency_id});break;case"validate session":o.getValidateSession({req:data.req,...s});break;case"get user businesses":o.getBusiness({req:data.req,...s,uid:n.uid,page:n.page-1,limit:n.limit});break;case"get topics":o.getTopics({req:data.req,...s,cat2:n.cat2,cat3:n.cat3,includeEmpty:n.includeEmpty,includeUnpublished:n.includeUnpublished,search:n.search,page:n.page-1,limit:n.limit});break;case"get business purposes":o.getPurpose({req:data.req,...s,business_id:n.business_id,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"get cart purposes":o.getCartPurposes({req:data.req,...s,purposes:n.purposes,language:n.language,page:n.page-1,limit:n.limit});break;case"get purpose shareholders":o.getShare({req:data.req,...s,purpose_id:n.purpose_id});break;case"get business by id":o.getBusinessById({req:data.req,...s,id:n.id});break;case"get purpose by id":o.getPurposeById({req:data.req,...s,id:n.id,language:n.language});break;case"get shareholder by id":o.getShareholderById({req:data.req,...s,id:n.id});break;case"get currency by id":o.getCurrencyById({req:data.req,...s,id:n.id});break;case"get transaction by id":o.getTransactionById({req:data.req,...s,id:n.id,language:n.language});break;case"register currency":o.mergeCurrency({req:data.req,...s,uid:n.uid,curr_title:n.curr_title,abbr:n.curr_abbr,rate:n.curr_rate,region:n.curr_region,reviser:n.reviser,workplace:n.workplace});break;case"register business":o.mergeBusiness({req:data.req,...s,uid:n.uid,title:n.businessTitle,description:n.businessDescription,reviser:n.reviser,workplace:n.workplace});break;case"register purpose":o.addPurpose({req:data.req,...s,uid:n.uid,language:n.language,business_id:n.businessID,title:n.purposeTitle,description:n.purposeDescription,category:n.purposeCategory,subcategory:n.purposeSubcategory,subcategory2:n.purposeSubcategory2,keywords:n.purposeKeywords,reviser:n.reviser,workplace:n.workplace});break;case"change purpose status":o.changePurposeStatus({req:data.req,...s,purpose_id:n.purpose_id,status:n.purpose_status,reviser:n.reviser,workplace:n.workplace});break;case"update purpose property":o.updatePurposeProps({req:data.req,...s,purpose_id:n.purposeID,title:n.purposeTitle,description:n.purposeDescription,category:n.purposeCategory,subcategory:n.purposeSubcategory,subcategory2:n.purposeSubcategory2,keywords:n.purposeKeywords,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"register shareholder":o.mergeShareholder({req:data.req,...s,purpose_id:n.purposeID,shareholder_id:n.personalID,roles:n.shareholderRoles,share:n.shares,reviser:n.reviser,workplace:n.workplace});break;case"change share":o.mergeShareholder({req:data.req,...s,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,share:n.share,reviser:n.reviser,workplace:n.workplace});break;case"remove shareholder":o.removeShareholder({req:data.req,...s,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,reviser:n.reviser,workplace:n.workplace});break;case"send message":o.saveMessage({req:data.req,...s,sender:n.sender,language:n.language,subject:n.subject,message:n.message,reviser:n.reviser,workplace:n.workplace});break;case"save article":o.saveArticle({req:data.req,...s,submitter:n.sender,language:n.language,text:n.message,title:n.subject,type:n.type,path1:n.path1,path2:n.path2,path3:n.path3,link:n.link,status:n.status,reviser:n.reviser,workplace:n.workplace});break;case"save text":o.saveText({req:data.req,...s,submitter:n.sender,language:n.language,description:n.message,appetizer:n.appetizer,title:n.subject,status:n.status,type:n.type,id:n.id,status:n.status,reviser:n.reviser,workplace:n.workplace});break;case"update texts":o.updateTexts({req:data.req,...s,jobs:n.files});break;case"save topics":o.saveTopics({req:data.req,...s,id:n.id,cat1:n.cat1,cat2:n.cat2,topics:n.topics,reviser:n.reviser,workplace:n.workplace});break;case"get article":o.getArticle({req:data.req,...s,type:n.type,link:n.link,language:n.language});break;case"get text":o.getText({req:data.req,...s,textid:n.link,language:n.language});break;case"get texts list":o.getTextsList({req:data.req,...s,cat2:n.cat2,type:n.link,includeUnpublished:n.includeUnpublished,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"get help list":o.getTextsList({req:data.req,...s,type:n.link,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"transfer U2S":o.transferU2S({req:data.req,...s,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,toAccount:n.toAccount,amount:n.amount,reviser:n.reviser,workplace:n.workplace});break;case"get cart":o.getCart({req:data.req,...s,customer:n.customer,cart:n.cart});break;case"get tan":o.getTAN({req:data.req,...s,email:n.email,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"submit tan":o.processTAN({req:data.req,...s,email:n.email,tan:n.tan,reviser:n.reviser,workplace:n.workplace});break;case"save cart":o.saveCart({req:data.req,...s,cartid:n.cartid,content:n.content,merchant:n.merchant,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2U":o.transferU2U({req:data.req,...s,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,recipient_id:n.toPersonalID,amount:n.amount,description:n.description,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2B":o.transferU2B({req:data.req,...s,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,purpose_id:n.purposeID,currency:n.currency,amount:n.amount,description:n.description,cart:void 0===n.cart?null:n.cart,merchant:void 0===n.merchant?null:n.merchant,reviser:n.reviser,workplace:n.workplace});break;case"end session":o.endSession({req:data.req,...s,token:data.session});break;default:console.log("Unknown request: "+data.req),E({req:data.req,...s,error:{code:"UNKNOWN_REQUEST"},context:["ProcessRequest.js","userRequest","switch default"],query:null})}}}},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("file-type")},function(e,n){e.exports=require("events")},function(e,n,s){const t=s(19),r=s(5),a=s(0);let o=null;const l=()=>{null===o&&(o=t.createPool({connectionLimit:1e3,host:a.db.host,user:a.db.user,password:a.db.password,database:a.db.database}),o.on("acquire",(function(e){console.log("Connection %d acquired",e.threadId)})),o.on("connection",(function(e){})),o.on("enqueue",(function(){console.log("Waiting for available connection slot")})),o.on("release",(function(e){console.log("Connection %d released",e.threadId)})))},i=e=>{let{queries:n,connection:s,onStatusChange:t,onError:a,req:o,reqData:l,session:u,email:c,tags:E,flags:p,queryCnt:d}=e;if(void 0===n[d])return s.commit(e=>{if(e)return s.rollback(()=>{a({req:o,reqData:l,session:u,error:e,context:["db_model.js","mergeIntoDb","INSERT INTO log","connection.commit"]})});t({req:o,reqData:l,session:u,email:c,tags:E,status:"success"})}),!0;const S=n[d].sql,m=n[d].values,T="undefined"!==n[d].name?n[d].name:null,A=s.query(S,m);A.on("error",e=>s.rollback((function(){a({name:T,req:o,reqData:l,session:u,error:e,context:["db_model.js","mergeIntoDb","connection.query"]})}))).on("fields",e=>{}).on("result",S=>{if(console.log("MERGE CONNECTION RESULT:",S),!(p&r.dbMergeFlags.ALLOW_UNCHANGED_ROWS)&&0===S.insertId&&0===S.changedRows&&0===S.affectedRows)return s.rollback((function(){a({name:T,req:o,reqData:l,session:u,error:{code:"NO_ROWS_CHANGED"},context:["db_model.js","mergeIntoDb","connection.rollback (1)"],query:A.sql})}));t({name:T,req:o,reqData:l,session:u,email:c,tags:E,queryCnt:d,results:S,status:"continue"}),d++,e.queryCnt=d,void 0!==n[d]&&(n[d].sql=n[d].sql.replace("[INSERT_ID]",S.insertId),e.queries=n),i(e)}).on("end",()=>{t({name:T,req:o,reqData:l,session:u,email:c,tags:E,queryCnt:d,status:"finished"})})};e.exports={mergeIntoDb:(e,n=2)=>{l();let s=e[0].req,t=void 0!==e[0].reqData?e[0].reqData:null,r=e[0].session,a=e[0].email,u=void 0!==e[0].tags?e[0].tags:null,c=(e[0].uid,e[0].onStatusChange),E=e[0].onError;o.getConnection((function(l,p){l?E({req:s,reqData:t,session:r,error:l,context:["db_model.js","mergeIntoDb","pool.getConnection"]}):(p.beginTransaction((function(o){if(o)return void E({req:s,reqData:t,session:r,error:o,context:["db_model.js","mergeIntoDb","connection.beginTransaction"]});i({queries:e,connection:p,onStatusChange:c,onError:E,req:s,reqData:t,session:r,email:a,tags:u,flags:n,queryCnt:0})})),o.releaseConnection(p))})),c({req:s,reqData:t,session:r,status:"pending"})},startDbConnection:l}},function(e,n){e.exports=require("mysql")},function(e,n){const s=e=>{const n=[2,1,2,5,7,1,2,1,2,5,7,1,2,2,5,7,1,2],s=e.split(""),t=[];s.forEach((e,s)=>{t.push(parseInt(e)*n[s])});const r=t.join("").split("");let a=0;return r.forEach(e=>{a+=parseInt(e)}),a%10};e.exports={getChecksum:s,validate:e=>{const n=e.slice(1),t=`${n.substr(0,2)}${n.substr(2,6)}${n.substr(8,1).toUpperCase().charCodeAt(0).toString().padStart(5,"0")}${parseInt(n.substr(9,4),16).toString().padStart(5,"0")}`;return parseInt(e.slice(-1))===s(t)}}},function(e,n){e.exports=require("object-hash")},function(e,n){e.exports=require("geoip-lite")},function(e,n,s){"use strict";const t=s(24),r=s(26),a=e=>e;e.exports={process:e=>{switch(e.type){case"userRequest":return"sign in user"===e.req&&"success"===e.status?r.saveToken(e.tags.email,e):"VALIDATE SESSION"===e.name&&"continue"===e.status?r.validateToken(e):"register user"!==e.req&&"update user"!==e.req&&"resend validate email token"!==e.req||"success"!==e.status?("get account data"===e.req&&e.status,"get tan"===e.req&&"success"===e.status||"reset password"===e.req&&"success"===e.status?null!==e.tags.token&&(t.send(e).catch(console.error),e):a(e)):null!==e.tags.token&&(t.send(e).catch(console.error),e)}return!1}}},function(e,n,s){"use strict";const t=s(25),r=s(0),a="Local-Currency.com";e.exports={send:e=>async function(e){let{token:n,email:s,language:o}=e.tags;const{req:l}=e;n=encodeURIComponent(n);const i=r.uri.ENDPOINT;let u=t.createTransport({host:"local-currency.com",port:465,secure:!0,auth:{user:"service@local-currency.com",pass:"hajgfd_36754_JSZDM"},tls:{rejectUnauthorized:!1}});u.verify((function(e,n){e?console.log(e):console.log("Server is ready to take our messages")}));let c,E="",p="",d="";switch(l){case"resend validate email token":case"register user":case"update user":"lv"===o?(E="Tava aktivizācijas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${a} komanda</p>\n        `,d=`\n        Sveiki,\n        \n\n\n        lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.\n        \n\n\n        ${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}\n        \n\n\n        Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.\n        \n\n\n        Paldies,\n        \n\n\n        Tava ${a} komanda\n        \n\n\n        `):(E="Your activation link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to validate your email address.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to validate your email address, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${a} team</p>\n        `,d=`\n          Hello,\n          \n\n\n          Follow this link to validate your email address.\n          \n\n\n          ${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}\n          \n\n\n          If you didn't ask to validate your email address, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${a} team\n          \n\n\n      `);break;case"get tan":"lv"===o?(E="Tavs pārskaitījuma numurs",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai veiktu ${a} pārskaitījumu, izmanto šo numuru.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${a} komanda</p>\n        `,d=`\n          Sveiki,\n          \n\n\n          lai veiktu ${a} pārskaitījumu, izmanto šo numuru.\n          \n\n\n          \n            ${n}\n            \n\n\n          \n          Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.\n          \n\n\n          Paldies,\n          \n\n\n          Tava ${a} komanda\n          \n\n\n      `):(E="Your transaction number",p=`\n          <p>Hello,</p>\n          \n          <p>Use this TAN for your ${a} transfer.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>If you didn't whish to make a transfer, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${a} team</p>\n        `,d=`\n          Hello,\n          \n\n\n          Use this TAN for your ${a} transfer.\n          \n\n\n\n            ${n}\n            \n\n\n          \n          If you didn't whish to make a transfer, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${a} team\n          \n\n\n      `);break;case"reset password":"lv"===o?(E="Tava paroles atiestatīšanas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai atiestatītu savu ${a} paroli, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${a} komanda</p>\n        `,d=`\n        Sveiki,\n        \n\n\n        lai atiestatītu savu ${a} paroli, izmanto šo saiti.\n        \n\n\n        \n          ${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}\n          \n\n\n        \n        Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.\n        \n\n\n        Paldies,\n        \n\n\n        Tava ${a} komanda\n        \n\n\n      `):(E="Your password reset link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to reset your ${a} password.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to reset your password, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${a} team</p>\n        `,d=`\n          Hello,\n          \n\n\n          Follow this link to reset your ${a} password.\n          \n\n\n          \n            ${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}\n            \n\n\n          \n          If you didn't ask to reset your password, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${a} team\n          \n\n\n      `)}return c=await u.sendMail({from:'"Local Currency Service" <noreply@local-currency.com>',to:s,bcc:[`"${s}" <strazds@gmail.com>`],list:{unsubscribe:{url:"https://local-currency.com/unsubscribe?email="+s,comment:"Unsubscribe"}},subject:E,text:d,html:(e=>`\n    <!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n      </head>\n      <body>\n        ${e}\n      </body>\n    </html>\n    `)(p)}),console.log("Info:",c),!0}(e)}},function(e,n){e.exports=require("nodemailer")},function(e,n,s){const t=s(27),r=s(4),a=s(6),o=(e,n={})=>{if(null===e)return!1;const s=t.create(e);return n.token=s.token,r.mergeSession({req:"save session",session:s.token,reqData:null,onStatusChange:()=>{},onError:()=>{},email:e,token:s.token,iv:s.iv}),n};e.exports={saveToken:o,validateToken:e=>{const n=e.results.token,s=e.results.iv,r=e.results.email,{status:l,renew:i}=t.validate(n,s,r);return delete e.results.iv,l?(i&&(e=o(r,e)),e):(delete e.results,delete e.reqData,e.type="userRequest",e.error={code:"INVALID_SESSION"},e.socketAction={closeSocket:n},e.context=["ProcessEvent.js","process","utoken.validate failed"],a.process(e))}}},function(e,n,s){const t=s(0),r=s(2),a="PRODUCTION"===t.mode?900:21600,o=e=>r.hash(e).substr(0,8);e.exports={create:e=>{const n=o(e),s=Math.floor(Date.now()/1e3)+a,t=r.encrypt(`${n}${s}`,!0);return{iv:t.iv,token:t.encryptedData}},validate:(e,n,s)=>{const t=o(s),a=r.decrypt(e,n);let l=a.substr(0,8)===t;const i=a.substr(8),u=Math.floor((Date.now()/1e3-i)/1);return i<Date.now()/1e3&&(l=!1),{status:l,renew:-u<120}}}}]);