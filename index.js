!function(e){var s={};function n(r){if(s[r])return s[r].exports;var a=s[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=s,n.d=function(e,s,r){n.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,s){if(1&s&&(e=n(e)),8&s)return e;if(4&s&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var a in e)n.d(r,a,function(s){return e[s]}.bind(null,a));return r},n.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(s,"a",s),s},n.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},n.p="",n(n.s=8)}([function(e,s,n){n(13).config();const r=n(2),a=void 0!==process.env.SITE_MODE?process.env.SITE_MODE:"DEVELOPMENT",t={uri:{ENDPOINT:process.env.DEV_URI},db:{host:process.env.DEV_DB_HOST,user:process.env.DEV_DB_USER,password:r.decrypt(process.env.DEV_DB_PASS),database:process.env.DEV_DB}},o={uri:{ENDPOINT:process.env.STAGING_URI},db:{host:process.env.STAGING_DB_HOST,user:process.env.STAGING_DB_USER,password:r.decrypt(process.env.STAGING_DB_PASS),database:process.env.STAGING_DB}},i={uri:{ENDPOINT:process.env.PROD_URI},db:{host:process.env.PROD_DB_HOST,user:process.env.PROD_DB_USER,password:r.decrypt(process.env.PROD_DB_PASS),database:process.env.PROD_DB}};let u;switch(a){case"DEVELOPMENT":u=t;break;case"STAGING":u=o;break;case"LIVE":u=i;break;default:u=t}e.exports={...u}},function(e,s){e.exports=require("uuid")},function(e,s,n){const r=n(3),a="2e3fa223e381c865cc25a533676b9e12e5eb5588331c32fe229d5088063e1208",t="456fe4efc189c7182278721778199fe3";e.exports={encrypt:(e,s=!1)=>{const n=s?r.randomBytes(16):t;let o=r.createCipheriv("aes-256-cbc",Buffer.from(a,"hex"),s?n:Buffer.from(n,"hex")),i=o.update(e);return i=Buffer.concat([i,o.final()]),{encryptedData:i.toString("hex"),iv:s?n.toString("hex"):""}},decrypt:(e,s=!1)=>{const n=!1===s?t:s;let o=Buffer.from(e,"hex"),i=r.createDecipheriv("aes-256-cbc",Buffer.from(a,"hex"),Buffer.from(n,"hex")),u=i.update(o);return u=Buffer.concat([u,i.final()]),u.toString()},hash:e=>r.createHash("sha256").update(e).digest("hex")}},function(e,s){e.exports=require("crypto")},function(e,s,n){const r=new(n(18).EventEmitter),a=n(3),t=n(19),o=(n(5),n(21)),i=n(22),u="_hjs_722m_GHAE_",l=({session:e})=>{let s=[],n=[],r=[];return s[0]="VALIDATE SESSION",n[0]='\n    SELECT COALESCE(email, "") AS email\n    , COALESCE(token, "") AS token\n    , COALESCE(iv, "") AS iv\n    FROM sessions\n    WHERE token = ?\n  ',r[0]=[e],{name:s,sql:n,values:r,index:0}},c=(e,s,n,r,a)=>{for(let t=1;t<=a;t++)e.push({name:s[t],sql:n[t],values:r[t]});return e};r.on("error",(function(e){console.log("Error: "+e.code)})),e.exports={getSequence:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,birthdate:i=null,timezone:u=null,uid:l=null,status:c=null,reviser:p=null,workplace:d=null})=>{let E=[],S=[],g=[];u=u.slice(5),E[0]="UPDATE users",S[0]="\n    UPDATE users\n    SET sequence = COALESCE(\n        (\n            SELECT seqplus FROM \n            (\n                SELECT MAX(u2.sequence) + 1 as seqplus\n                FROM users AS u2\n                WHERE DATE(u2.birthdate) = DATE(?)\n                AND u2.timezone = ?\n            ) as x\n    \t), 0\n    )\n    WHERE email = ?\n    ",g[0]=[i,u,o],E[1]="SELECT FROM users",S[1]="\n    SELECT sequence\n    FROM users\n    WHERE email = ?\n    ",g[1]=[o];let m=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:o,uid:l,name:E[0],sql:S[0],values:g[0]},{name:E[1],sql:S[1],values:g[1]}];return t.mergeIntoDb(m)},mergeUser:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:l=(()=>{}),uid:p=null,firstname:d=null,lastname:E=null,email:S=null,birthdate:g=null,timezone:m=null,scode:T=null,tcode:q=null,sequence:_=null,pw:A=null,website:C=null,phone:D=null,acc_curr:h=null,acc_cred:b=null,acc_save:v=null,language:I=null,status:O=null,validateEmail:k=!1,reviser:N=null,workplace:L=null})=>{let R=[],f=[],U=[],M=-1;if(null===p&&null!==T&&null!==q&&null!==_){const r=o.getChecksum(`${q}${_}`);if(p=`U${T}${parseInt(_).toString(16).padStart(4,"0")}${r}`,!o.validate(p))return void l({req:e,reqData:s,session:n,error:{code:"CHECKSUM_FAILED"},context:["db.js","mergeUser",p]})}M++,R[M]="INSERT INTO users",f[M]="\n    INSERT INTO users (firstname, lastname, email, pw, acc_curr, acc_cred, acc_save, allowance_date, language, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, 0, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    uid = COALESCE(?, uid)\n    , firstname = COALESCE(?, firstname)\n    , lastname = COALESCE(?, lastname)\n    , email = COALESCE(?, email)\n    , pw = COALESCE(?, pw)\n    , birthdate = COALESCE(?, birthdate)\n    , timezone = COALESCE(?, timezone)\n    , website = COALESCE(?, website)\n    , phone = COALESCE(?, phone)\n    , acc_curr = COALESCE(?, acc_curr)\n    , acc_cred = COALESCE(?, acc_cred)\n    , acc_save = COALESCE(?, acc_save)\n    , language = COALESCE(?, language)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",U[M]=[d,E,S,null!==A?i(`${u}${A}`):null,0,1e3,0,I,N,L,p,d,E,S,null!==A?i(`${u}${A}`):null,g,m,C,D,h,b,v,I,O,N,L];let w=null;k&&(w=a.randomBytes(64).toString("base64"),M++,R[M]="INSERT INTO validation_tokens",f[M]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",U[M]=[S,w,0,N,L,O,N,L]);let y=[{req:e,reqData:s,session:n,onStatusChange:r,onError:l,email:S,tags:{token:w,email:S,language:I},uid:p,name:R[0],sql:f[0],values:U[0]}];return y=c(y,R,f,U,M),t.mergeIntoDb(y)},endSession:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null})=>{let i=[],u=[],l=[];i[0]="UPDATE sessions",u[0]="\n    UPDATE sessions\n    SET token = ''\n    , iv = ''\n    WHERE token = ?\n  ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},mergeSession:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,token:i=null,iv:u=null,status:l=0})=>{let c=[],p=[],d=[];c[0]="INSERT INTO sessions",p[0]="\n    INSERT INTO sessions (email, token, iv, status, created)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP())\n    ON DUPLICATE KEY UPDATE \n    token = COALESCE(?, token)\n    , iv = COALESCE(?, iv)\n    , status = COALESCE(?, status)\n    , created = UTC_TIMESTAMP()\n  ",d[0]=[o,i,u,l,i,u,l];let E=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:null,name:c[0],sql:p[0],values:d[0]}];return t.mergeIntoDb(E)},mergeBusiness:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,title:i=null,description:u=null,status:p=0,reviser:d=null,workplace:E=null})=>{let{name:S,sql:g,values:m,index:T}=l({session:n});T++,S[T]="INSERT INTO businesses",g[T]="\n    INSERT INTO businesses (title, description, owner_id, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    description = COALESCE(?, description)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",m[T]=[i,u,o,p,d,E,u,p,d,E];let q=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:null,uid:o,name:S[0],sql:g[0],values:m[0]}];return q=c(q,S,g,m,T),t.mergeIntoDb(q)},mergeCurrency:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,curr_title:i=null,abbr:u=null,rate:p=null,region:d=null,status:E=0,reviser:S=null,workplace:g=null})=>{let{name:m,sql:T,values:q,index:_}=l({session:n});_++,m[_]="INSERT INTO currencies",T[_]="\n    INSERT INTO currencies (name, abbr, rate, region, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    name = COALESCE(?, name)\n    , abbr = COALESCE(?, abbr)\n    , rate = COALESCE(?, rate)\n    , region = COALESCE(?, region)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",q[_]=[i,u,p,d,E,S,g,i,u,p,d,E,S,g];let A=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:null,uid:o,name:m[0],sql:T[0],values:q[0]}];return A=c(A,m,T,q,_),t.mergeIntoDb(A)},getTAN:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];const S=(g=1e5,m=999999,g=Math.ceil(g),m=Math.floor(m),Math.floor(Math.random()*(m-g+1))+g).toString();var g,m;p[0]="INSERT INTO tans",d[0]="\n  INSERT INTO tans (type, email, tan, expiration, status, created, reviser, workplace)\n  VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE), ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  tan = COALESCE(?, tan)\n  , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",E[0]=[o,S,0,l,c,S,0,l,c];let T=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:o,tags:{token:S,email:o,language:i},name:p[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(T)},processTAN:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,tan:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];p[0]="UPDATE tans",d[0]="\n    UPDATE tans\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND tan = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",E[0]=[1,o,i];let S=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:p[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(S)},saveCart:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),type:o="default",cartid:i=null,content:u=null,merchant:l=null,customer:c=null,status:p=null,reviser:d=null,workplace:E=null})=>{let S=[],g=[],m=[];S[0]="INSERT INTO carts",g[0]="\n  INSERT INTO carts (type, cartid, content, expiration, merchant, status, created, reviser, workplace)\n  VALUES (?, ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 6 HOUR), ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  customer = COALESCE(?, customer)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",m[0]=[o,i,u,l,0,d,E,c,p,d,E];let T=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:S[0],sql:g[0],values:m[0]}];return t.mergeIntoDb(T)},getCart:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),customer:o=null,cart:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT carts",l[0]="\n    SELECT type, cartid, content\n    FROM carts\n    WHERE cartid = ?  \n    AND expiration >= UTC_TIMESTAMP()\n    AND status = 0\n    ",c[0]=[i],u[1]="UPDATE carts",l[1]="\n    UPDATE carts\n    SET customer = ?\n    WHERE cartid = ?  \n    ",c[1]=[o,i];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]},{name:u[1],sql:l[1],values:c[1]}];return t.mergeIntoDb(p)},transferU2S:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:p=null,amount:d=null,reviser:E=null,workplace:S=null})=>{if(d<=0)return void a({req:e,reqData:s,session:n,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2S","amount <= 0"]});let{name:g,sql:m,values:T,index:q}=l({session:n});q++,g[q]="UPDATE users",m[q]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    ${p} = ${p} + ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,T[q]=[d,d,E,S,i,d],q++,g[q]="INSERT INTO transactions",m[q]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[q]=[e,d,i],q++,g[q]="INSERT INTO transaction_positions",m[q]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[q]=[d,i,u,p];let _=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,uid:o,name:g[0],sql:m[0],values:T[0]}];return _=c(_,g,m,T,q),t.mergeIntoDb(_)},transferU2U:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:p="acc_curr",recipient_id:d=null,amount:E=null,description:S=null,reviser:g=null,workplace:m=null})=>{if(E<=0)return void a({req:e,reqData:s,session:n,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2U","amount <= 0"]});let{name:T,sql:q,values:_,index:A}=l({session:n});A++,T[A]="UPDATE sender",q[A]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,_[A]=[E,g,m,i,E],A++,T[A]="UPDATE recipient",q[A]=`\n  UPDATE users\n  SET ${p} = ${p} + ?,\n  reviser = ?,\n  workplace = ?\n  WHERE uid = ?\n  AND acc_curr + acc_cred + acc_save + ? <= 2000 + DATEDIFF(UTC_TIMESTAMP(), created) * 48\n  AND acc_curr + acc_cred + acc_save + ? <= 24000\n  `,_[A]=[E,g,m,d,E,E],A++,T[A]="INSERT INTO transactions",q[A]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",_[A]=[e,E,i,S],A++,T[A]="INSERT INTO transaction_positions",q[A]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",_[A]=[E,d,u,p];let C=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,uid:o,name:T[0],sql:q[0],values:_[0]}];return C=c(C,T,q,_,A),t.mergeIntoDb(C)},transferU2B:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:p="acc_curr",purpose_id:d=null,currency:E="Z",amount:S=null,description:g=null,reviser:m=null,workplace:T=null})=>{if(S<=0)return void a({req:e,reqData:s,session:n,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2B","amount <= 0"]});let{name:q,sql:_,values:A,index:C}=l({session:n});C++,q[C]="UPDATE sender",_[C]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    `,A[C]=[S,m,T,i],C++,q[C]="UPDATE shareholders",_[C]=`\n  UPDATE users AS u\n  LEFT JOIN shares AS s1 ON s1.shareholder_id = u.uid\n  LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n  SET u.${p} = u.${p} + ROUND(? / \n    (\n      SELECT SUM(s2.share) \n      FROM shares AS s2 \n      WHERE s2.purpose_id = s1.purpose_id\n    ) * s1.share, 5),\n  u.reviser = ?,\n  u.workplace = ?\n  WHERE p.purpose_id = ?\n  `,A[C]=[S,m,T,d],C++,q[C]="INSERT INTO transactions",_[C]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, purpose_id, comment, created, reviser, workplace)\n  VALUES (?, ?, ?, (SELECT rate FROM currencies WHERE abbr = ?), ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",A[C]=[e,S,E,E,i,d,g],C++,q[C]="INSERT INTO transaction_positions",_[C]=`\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, roles, share, share_per_cent, from_account, to_account, created, reviser, workplace)\n  SELECT '[INSERT_ID]', \n  (\n    ? / \n    (\n      SELECT SUM(s2.share) \n      FROM shares AS s2 WHERE \n      s2.purpose_id = s1.purpose_id\n    ) * s1.share\n  ) AS amount,\n  s1.shareholder_id, s1.roles, s1.share,\n  (\n    100 / \n    (\n      SELECT SUM(s3.share) \n      FROM shares AS s3 WHERE \n      s3.purpose_id = s1.purpose_id\n    ) * s1.share\n  ) AS share_per_cent,\n  '${u}', '${p}', UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM'\n  FROM shares AS s1\n  LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n  LEFT JOIN users AS u ON u.uid = s1.shareholder_id\n  WHERE s1.purpose_id = ?\n  `,A[C]=[S,d];let D=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,uid:o,name:q[0],sql:_[0],values:A[0]}];return D=c(D,q,_,A,C),t.mergeIntoDb(D)},transferV2U:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),fromAccount:o="vault",toAccount:i="acc_save",recipient_id:u=null,amount:p=48,description:d="allowance",reviser:E="VAULT",workplace:S="SYSTEM"})=>{if(p<=0)return void a({req:e,reqData:s,session:n,error:{code:"INVALID_AMOUNT"},context:["db.js","transferV2U","amount <= 0"]});let{name:g,sql:m,values:T,index:q}=l({session:n});q++,g[q]="UPDATE vault",m[q]="\n    UPDATE vault\n    SET acc = acc - ?,\n    reviser = ?,\n    workplace = ?\n    AND acc - ? >= 0\n    ",T[q]=[p,E,S,p],q++,g[q]="UPDATE recipient",m[q]=`\n  UPDATE users AS u\n  INNER JOIN sessions AS s ON s.email = u.email \n  AND s.token = ?\n  SET u.${i} = u.${i} + ?,\n  u.allowance_date = DATE(UTC_TIMESTAMP()),\n  u.reviser = ?,\n  u.workplace = ?\n  WHERE u.uid = ?\n  AND (u.allowance_date < DATE(UTC_TIMESTAMP()) OR u.allowance_date IS null)\n  `,T[q]=[n,p,E,S,u],q++,g[q]="INSERT INTO transactions",m[q]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), ?, ?)",T[q]=[e,p,d,E,S],q++,g[q]="INSERT INTO transaction_positions",m[q]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)",T[q]=[p,u,o,i,E,S];let _=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:g[0],sql:m[0],values:T[0]}];return _=c(_,g,m,T,q),t.mergeIntoDb(_)},getUriSettings:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uri:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT FROM uri_settings",u[0]="\n    SELECT settings\n    FROM uri_settings\n    WHERE uri = ?\n    ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},signInUser:({req:e=null,reqData:s=null,session:r=null,onStatusChange:a=(()=>{}),onError:o=(()=>{}),email:l=null,ip:c=null,pw:p=null})=>{const d=c,E=n(23).lookup(d);let S=[],g=[],m=[],T=-1;T++,S[T]="SELECT users",g[T]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.language, u.status, u.ts,\n    c.name AS currency_name, c.abbr AS currency_abbr, c.rate AS currency_rate, c.status AS currency_status\n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.pw = ?\n    ",m[T]=[l,i(`${u}${p}`)],T++,S[T]="INSERT INTO user_connection",g[T]="\n    INSERT INTO user_connection (\n      email, date, ip, connections, \n      country, region, eu, timezone, city, gps_lat, gps_lon, metro, area, \n      created, reviser, workplace\n    )\n    VALUES (\n      ?, UTC_TIMESTAMP(), ?, 1,\n      ?, ?, ?, ?, ?, ?, ?, ?, ?,\n      UTC_TIMESTAMP(), 'SYS', 'SYSTEM'\n    )\n    ON DUPLICATE KEY UPDATE \n    connections = connections + 1\n    ",m[T]=[l,d,null===E?null:E.country,null===E?null:E.region,null===E?null:E.eu,null===E?"-":E.timezone,null===E?"-":E.city,null===E?null:E.gps_lat,null===E?null:E.gps_lon,null===E?null:E.metro,null===E?"-":E.area];let q=[{req:e,reqData:s,session:r,onStatusChange:a,onError:o,tags:{email:l},name:S[0],sql:g[0],values:m[0]},{name:S[1],sql:g[1],values:m[1]}];return t.mergeIntoDb(q)},resetPassword:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:o=(()=>{}),uid:i=null,email:u=null,status:l=0,language:c=null,reviser:p=null,workplace:d=null})=>{let E=[],S=[],g=[],m=a.randomBytes(64).toString("base64");E[0]="INSERT INTO validation_tokens",S[0]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('password', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    token = COALESCE(?, token)\n    , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",g[0]=[u,m,0,p,d,m,l,p,d];let T=[{req:e,reqData:s,session:n,onStatusChange:r,onError:o,email:u,tags:{token:m,email:u,language:c},uid:i,name:E[0],sql:S[0],values:g[0]}];return t.mergeIntoDb(T)},getUser:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT users",u[0]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, c.name AS currency_name, c.abbr AS currency_abbr, u.language, u.status, u.ts \n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},uploadFile:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{})})=>{let o=[],i=[],u=[];o[0]="SELECT 1",i[0]="SELECT COUNT(*) AS count_users FROM users WHERE status = 1",u[0]=[];let l=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:o[0],sql:i[0],values:u[0]}];return t.mergeIntoDb(l)},getAccount:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null})=>{let{name:i,sql:u,values:p,index:d}=l({session:n});d++,i[d]="SELECT users",u[d]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.status, u.ts \n    , s.token, s.iv\n    FROM users AS u\n    INNER JOIN sessions AS s ON s.email = u.email \n    WHERE u.uid = ?\n    AND s.token = ?\n    ",p[d]=[o,n];let E=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:p[0]}];return E=c(E,i,u,p,d),t.mergeIntoDb(E)},getValidateSession:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{})})=>{let{name:o,sql:i,values:u,index:c}=l({session:n}),p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:o[0],sql:i[0],values:u[0]}];return t.mergeIntoDb(p)},getBusiness:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,page:i=0,limit:u=1})=>{let{name:p,sql:d,values:E,index:S}=l({session:n});S++,p[S]="SELECT businesses",d[S]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE owner_id = ? AND status < 2\n    LIMIT ? OFFSET ?\n    ",E[S]=[o,u,i*u],S++,p[S]="COUNT businesses",d[S]="\n    SELECT COUNT(*) as count_businesses\n    FROM businesses\n    WHERE owner_id = ?\n  ",E[S]=[o];let g=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:p[0],sql:d[0],values:E[0]}];return g=c(g,p,d,E,S),t.mergeIntoDb(g)},getBusinessById:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT businesses",u[0]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE id = ? AND status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCartPurposes:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purposes:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];const E=JSON.parse(o);c[0]="SELECT purposes",p[0]="\n    SELECT p.business_id, p.purpose_id, pp.title, pp.description, pp.link, pp.image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM purposes AS p\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    WHERE p.purpose_id IN (?) \n    AND p.status = 1\n    AND pp.language = ?\n    ORDER BY pp.title\n    LIMIT ? OFFSET ?\n    ",d[0]=[E,i,l,u*l],c[1]="COUNT purposes",p[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE purpose_id IN (?)\n    AND status = 1\n  ",d[1]=[E];let S=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(S)},getPurpose:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),business_id:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];c[0]="SELECT purposes",p[0]="\n  SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n  , COALESCE(pp.title, p.title) AS title, COALESCE(pp.description, p.description) AS description\n  , pp.category, pp.subcategory, pp.subcategory2, pp.keywords, pp.link, pp.image\n  FROM purposes AS p\n  LEFT JOIN purpose_props AS pp\n    ON pp.purpose_id = p.purpose_id\n    AND (pp.language = ? OR pp.language IS NULL)\n  WHERE p.business_id = ?\n  AND p.status < 2\n  ORDER BY pp.title\n  LIMIT ? OFFSET ?\n    ",d[0]=[i,o,l,u*l],c[1]="COUNT purposes",p[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE business_id = ?\n    AND status < 2\n  ",d[1]=[o];let E=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(E)},getPurposeById:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT purposes",l[0]="\n    SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    , pp.title, pp.description, pp.category, pp.subcategory, pp.subcategory2, pp.keywords, pp.link, pp.image\n    FROM purposes AS p\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    WHERE p.id = ? \n    AND p.status < 2\n    AND pp.language = ?\n    ",c[0]=[o,i];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},getShare:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null})=>{let{name:i,sql:u,values:p,index:d}=l({session:n});d++,i[d]="SELECT shares",u[d]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.purpose_id = ? \n    AND s.status < 2\n    AND u.status < 2\n    ",p[d]=[o];let E=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:p[0]}];return E=c(E,i,u,p,d),t.mergeIntoDb(E)},getShareholderById:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT shares",u[0]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.id = ?  \n    AND s.status < 2\n    AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCurrencyById:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT currencies",u[0]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies as c\n    LEFT JOIN currency_sponsors as cs ON cs.abbr = c.abbr\n    WHERE c.id = ?  \n    AND c.status < 2\n    GROUP BY c.abbr\n    ",l[0]=[o];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getTransactionById:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT transaction_positions",l[0]="\n    SELECT (tp.amount * t.exchange_rate) as conv_amount, tp.to_account, tp.roles, tp.share, tp.share_per_cent,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created,\n    u.firstname, u.lastname, u.status AS sender_status,\n    pp.title AS purpose_title, pp.description AS purpose_description, pp.link AS purpose_link, pp.image AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS u ON u.uid = t.sender_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.id = ?\n    AND pp.language = ?\n    ",c[0]=[o,i];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},getCurrencies:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),page:o=0,limit:i=5})=>{let{name:u,sql:p,values:d,index:E}=l({session:n});E++,u[E]="SELECT currencies",p[E]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies AS c\n    LEFT JOIN currency_sponsors AS cs ON cs.abbr = c.abbr\n    WHERE c.status < 2\n    GROUP BY c.abbr\n    ORDER BY sponsors DESC, c.abbr\n    LIMIT ? OFFSET ?\n    ",d[E]=[i,o*i],E++,u[E]="COUNT currencies",p[E]="\n    SELECT COUNT(*) count_currencies FROM currencies;\n  ",d[E]=[];let S=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:p[0],values:d[0]}];return S=c(S,u,p,d,E),t.mergeIntoDb(S)},getTransactions:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,page:u=0,limit:p=5})=>{let{name:d,sql:E,values:S,index:g}=l({session:n});g++,d[g]="SELECT transactions",E[g]="\n  SELECT *\n  FROM (\n    SELECT 'sender' AS tid, (tp.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, tp.recipient_id, tp.roles, tp.share, tp.share_per_cent, \n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.recipient_id = ?\n\n    UNION ALL\n\n    SELECT 'receiver' AS tid, (t.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, '-' AS recipient_id, '-' AS roles, '-' AS share, '-' AS share_per_cent,\n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transactions AS t\n    LEFT JOIN transaction_positions AS tp ON tp.transaction_id = t.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE t.sender_id = ?\n    GROUP BY tp.transaction_id\n    \n  ) a\n  ORDER BY created DESC, conv_amount\n  LIMIT ? OFFSET ?\n    ",S[g]=[o,o,p,u*p],g++,d[g]="COUNT transactions",E[g]="\n    SELECT\n    (\n      SELECT COUNT(*)\n      FROM transaction_positions AS tp\n      LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n      WHERE tp.recipient_id = ?\n    ) +\n    (\n      SELECT COUNT(*)\n      FROM transactions\n      WHERE sender_id = ?\n    )\n    AS count_transaction_positions\n  ",S[g]=[o,o];let m=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:S[0]}];return m=c(m,d,E,S,g),t.mergeIntoDb(m)},getShares:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,page:u=0,limit:p=5})=>{let{name:d,sql:E,values:S,index:g}=l({session:n});g++,d[g]="SELECT shares",E[g]="\n    SELECT s.shareholder_id, s.purpose_id, s.title AS shares_title, s.description AS shares_description, s.roles AS shares_roles, s.share AS shares_share, s.status AS shares_status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as shares_created,\n    pp.title AS purpose_title, pp.description AS purpose_description, pp.link AS purpose_link, pp.image AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    o.uid AS owner_uid, o.firstname AS owner_firstname, o.lastname AS owner_lastname, o.status AS owner_status,\n    (\n      100 / \n      (\n        SELECT SUM(s2.share) \n        FROM shares AS s2 \n        WHERE s2.purpose_id = s.purpose_id\n      ) * s.share\n    ) AS share_per_cent\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    LEFT JOIN users as o ON o.uid = b.owner_id\n    WHERE s.shareholder_id = ?\n    AND s.status < ?\n    AND pp.language = ?\n    ORDER BY shares_created DESC, shares_title\n    LIMIT ? OFFSET ?\n    ",S[g]=[o,2,i,p,u*p],g++,d[g]="COUNT shares",E[g]="\n    SELECT COUNT(*) as count_shares\n    FROM shares\n    WHERE shareholder_id = ?\n  ",S[g]=[o];let m=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:S[0]}];return m=c(m,d,E,S,g),t.mergeIntoDb(m)},updatePurposeProps:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,language:i=null,title:u=null,description:p=null,category:d=null,subcategory:E=null,subcategory2:S=null,keywords:g=null,link:m=null,image:T=null,status:q=0,reviser:_=null,workplace:A=null})=>{let{name:C,sql:D,values:h,index:b}=l({session:n});b++,C[b]="MERGE purpose_props",D[b]="\n  INSERT INTO purpose_props (purpose_id, language, title, description, category, subcategory, subcategory2, keywords, link, image, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , category = COALESCE(?, category)\n  , subcategory = COALESCE(?, subcategory)\n  , subcategory2 = COALESCE(?, subcategory2)\n  , keywords = COALESCE(?, keywords)\n  , link = COALESCE(?, link)\n  , image = COALESCE(?, image)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",h[b]=[o,i,u,p,d,E,S,g,m,T,q,_,A,u,p,d,E,S,g,m,T,q,_,A,o,i];let v=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:C[0],sql:D[0],values:h[0]}];return v=c(v,C,D,h,b),t.mergeIntoDb(v)},addPurpose:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,business_id:u=null,purpose_id:p=null,title:d=null,description:E=null,category:S=null,subcategory:g=null,subcategory2:m=null,keywords:T=null,link:q=null,image:_=null,status:A=0,reviser:C=null,workplace:D=null})=>{let{name:h,sql:b,values:v,index:I}=l({session:n});I++,h[I]="INSERT INTO purposes",b[I]="\n  INSERT INTO purposes (business_id, purpose_id, title, description, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",v[I]=[u,p,d,E,A,C,D],I++,h[I]="INSERT INTO purpose_props",b[I]="\n  INSERT INTO purpose_props (purpose_id, language, title, description, category, subcategory, subcategory2, keywords, link, image, status, created, reviser, workplace)\n  VALUES ( (SELECT purpose_id FROM purposes WHERE id = [INSERT_ID]), ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, UTC_TIMESTAMP(), ?, ?)\n  ",v[I]=[i,d,E,S,g,m,T,q,_,C,D];let O=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:null,uid:o,name:h[0],sql:b[0],values:v[0]}];return O=c(O,h,b,v,I),t.mergeIntoDb(O)},changePurposeStatus:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,status:i=0,reviser:u=null,workplace:l=null})=>{let c=[],p=[],d=[];c[0]="UPDATE purposes",p[0]="\n  UPDATE purposes\n  SET status = ?\n  WHERE purpose_id = ?\n  ",d[0]=[i,o];let E=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]}];return t.mergeIntoDb(E)},mergeShareholder:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,roles:p=null,share:d=null,title:E=null,description:S=null,status:g=0,reviser:m=null,workplace:T=null})=>{let{name:q,sql:_,values:A,index:C}=l({session:n});C++,q[C]="INSERT INTO shares",_[C]="\n  INSERT INTO shares (purpose_id, shareholder_id, title, description, roles, share, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , roles = COALESCE(?, roles)\n  , share = COALESCE(?, share)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)",A[C]=[i,u,E,S,p,d,g,m,T,E,S,p,d,g,m,T];let D=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,email:null,uid:o,name:q[0],sql:_[0],values:A[0]}];return D=c(D,q,_,A,C),t.mergeIntoDb(D)},removeShareholder:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];p[0]="UPDATE shares",d[0]="\n  UPDATE shares\n  SET share = ?\n  , status = ?\n  WHERE purpose_id = ? AND shareholder_id = ?\n  ",E[0]=[0,2,i,u];let S=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:p[0],sql:d[0],values:E[0],uid:o,email:null}];return t.mergeIntoDb(S)},saveMessage:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),sender:o=null,language:i=null,subject:u=null,message:l=null,reviser:c=null,workplace:p=null})=>{let d=[],E=[],S=[];d[0]="INSERT INTO contact",E[0]="\n  INSERT INTO contact (sender, subject, message, language, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",S[0]=[o,u,l,i,c,p];let g=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:S[0]}];return t.mergeIntoDb(g)},mergeUserLanguage:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE users",l[0]="\n    UPDATE users \n    SET language = ?\n    WHERE email = ?\n    ",c[0]=[i,o];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},mergeUserCurrency:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,currency_id:i=null})=>{let{name:u,sql:p,values:d,index:E}=l({session:n});E++,u[E]="UPDATE users",p[E]="\n    UPDATE users \n    SET currency_id = ?\n    WHERE email = ?\n    ",d[E]=[i,o];let S=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:p[0],values:d[0]}];return S=c(S,u,p,d,E),t.mergeIntoDb(S)},validateEmailToken:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE validation tokens",l[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,i,o],u[1]="UPDATE users",l[1]="\n    UPDATE users\n    SET status = ?\n    WHERE email = ? \n    ",c[1]=[1,i];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]},{name:u[1],sql:l[1],values:c[1]}];return t.mergeIntoDb(p)},resendValidateEmailToken:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,token:i=null,language:u=null})=>{let l=[],c=[],p=[];l[0]="UPDATE validation tokens",c[0]="\n    UPDATE validation_tokens\n    SET resent = resent + 1\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ?\n    AND status = 0\n    AND expiration >= UTC_TIMESTAMP()\n    ",p[0]=[o,i],l[1]="SELECT validation_tokens",c[1]="\n    SELECT resent\n    FROM validation_tokens\n    WHERE email = ?\n    AND type = 'email' \n    ",p[1]=[o];let d=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,tags:{token:i,email:o,language:u},name:l[0],sql:c[0],values:p[0]},{name:l[1],sql:c[1],values:p[1]}];return t.mergeIntoDb(d)},validatePasswordResetToken:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE validation tokens",l[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'password'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,i,o];let p=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},unknownRequest:({req:e=null,reqData:s=null,session:n=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT unknown request",u[0]="SELECT 'unknown request' AS error",l[0]=[];let c=[{req:e,reqData:s,session:n,onStatusChange:r,onError:a,uid:o,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)}}},function(e,s){e.exports={dbMergeFlags:{ALLOW_UNCHANGED_ROWS:1}}},function(e,s){const n=e=>(e.status="error",e);e.exports={process:e=>{let s=e.type;switch(console.log("PROCESS TYPE: ",s),s){case"userRequest":return n(e)}return!1}}},function(e,s,n){const r=n(2),a=e=>r.hash(e).substr(0,8);e.exports={create:e=>{const s=a(e),n=Math.floor(Date.now()/1e3)+900,t=r.encrypt(`${s}${n}`,!0);return{iv:t.iv,token:t.encryptedData}},validate:(e,s,n)=>{const t=a(n),o=r.decrypt(e,s);let i=o.substr(0,8)===t;const u=o.substr(8),l=Math.floor((Date.now()/1e3-u)/1);return u<Date.now()/1e3&&(i=!1),{status:i,renew:-l<120}}}},function(e,s,n){(function(e){const s="Suranadira"!==n(9).hostname(),r=n(10),a=r(),t=n(11).Server(a),o=n(12)(t,{serveClient:!1,reconnection:!0,reconnectionDelay:1e3,reconnectionDelayMax:5e3,reconnectionAttempts:1/0}),{v4:i}=n(1),u=n(0).uri.ENDPOINT;o.setMaxListeners(0);const l=n(14);global.appRoot=l.resolve(e);const c=n(15);t.listen(s?443:9e3),a.use(r.static(e+"/_client")),a.use(r.json()),a.use(r.urlencoded({extended:!0}));const p=[],d=e=>{!1!==e&&(console.log("SENDING",e,"TO",e.session),o.in(e.session).emit("onDataReceived",e),void 0!==e.socketAction&&void 0!==e.socketAction.closeSocket&&E(e.socketAction.closeSocket))},E=e=>{o.of("/").in(e).clients((s,n)=>{if(s)throw s;n.forEach(s=>o.sockets.sockets[s].leave(e))})};a.post("/ip",(function(e,s){const n=e.headers["x-forwarded-for"]||e.connection.remoteAddress||e.socket.remoteAddress||(e.connection.socket?e.connection.socket.remoteAddress:null);s.send({ip:n})})),a.post("/auth",(function(e,s){const n=i(),r=void 0!==e.body.merchant?e.body.merchant:"",a=void 0!==e.body.cart?e.body.cart:"",t={cartid:n,content:a,merchant:r,reviser:"SYS",workplace:"SYSTEM"};c.userRequest({data:{req:"save cart",session:null,data:t},onResult:()=>{}}),s.redirect(`${u}/auth?cart=${n}`)})),a.get("/",(function(e,s){const n=l.resolve("public/index.html");s.sendFile(n,(function(e){e&&s.status(500).send(e)}))})),a.get("*",(function(e,s){const n=l.resolve("./_client/index.html");console.log("resolvedPath:",n),s.sendFile(n,(function(e){e&&s.status(500).send(e)}))})),o.on("connection",e=>{p.push(e),e.on("start session",(function(s){e.join(s.session),s.status="success",s.socketId=e.id,s.reqData=s.data,o.in(s.session).emit("onDataReceived",s),console.log("Socket started the session",s.session),console.log("ROOMS:",p[0].adapter.rooms)})),e.on("end session",(function(s){s.status="success",s.reqData=s.data,o.in(s.session).emit("onDataReceived",s),e.leave(s.session),console.log("Socket ended the session",s.session)})),e.on("disconnect",()=>{console.log("Got disconnect!");const s=p.indexOf(e);p.splice(s,1)}),e.on("onDataReceived",e=>{c.userRequest({data:e,onResult:d})})})}).call(this,"/")},function(e,s){e.exports=require("os")},function(e,s){e.exports=require("express")},function(e,s){e.exports=require("http")},function(e,s){e.exports=require("socket.io")},function(e,s){e.exports=require("dotenv")},function(e,s){e.exports=require("path")},function(e,s,n){const r=n(16),a=n(17),{v4:t}=n(1),o=n(4),i=n(6),u=n(24);n(7);let l=null;const c=e=>{let s;e.type="userRequest",s=u.process(e),console.log("processEvent response: ",s),!1!==s&&l(s)},p=e=>{console.log("onError: ",e),e.type="userRequest",res=i.process(e),!1!==res&&(console.log("emit onDataReceived: ",res),l(res))};e.exports={userRequest:e=>{data=e.data,l=e.onResult;const s=data.data;switch(data.req){case"get account data":o.getAccount({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid});break;case"dispatch daily allowance":o.transferV2U({req:"transfer V2U",session:data.session,reqData:s,onStatusChange:c,onError:p,recipient_id:s.uid});break;case"get transactions":o.getTransactions({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,language:s.language,page:s.page-1,limit:s.limit});break;case"get shares":o.getShares({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,language:s.language,page:s.page-1,limit:s.limit});break;case"sign in user":o.getUriSettings({req:"get uri settings",session:data.session,reqData:s,onStatusChange:c,onError:p,uri:s.uri}),o.signInUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,pw:s.password,ip:s.ip});break;case"register user":o.mergeUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,firstname:s.firstName,lastname:s.lastName,email:s.email,pw:s.password,language:s.language,validateEmail:s.validateEmail,reviser:s.reviser,workplace:s.workplace});break;case"change password":o.mergeUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,pw:s.password,reviser:s.reviser,workplace:s.workplace});break;case"get user sequence":o.getSequence({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,birthdate:s.birthDate,timezone:s.timezone,uid:null,reviser:s.reviser,workplace:s.workplace});break;case"register account":o.mergeUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,birthdate:s.birthDate,timezone:s.timezone,scode:s.scode,tcode:s.tcode,sequence:s.sequence,uid:null,reviser:s.reviser,workplace:s.workplace});break;case"update user":o.mergeUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,uid:s.personalID,firstname:s.firstName,lastname:s.lastName,pw:s.password,reviser:s.reviser,workplace:s.workplace});break;case"validate email token":o.validateEmailToken({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,token:s.token,email:s.email});break;case"resend validate email token":o.resendValidateEmailToken({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,token:s.token,language:s.language});break;case"validate password reset token":o.validatePasswordResetToken({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,token:s.token,email:s.email});break;case"reset password":o.resetPassword({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,language:s.language});break;case"upload file":console.log("UPLOAD FILE DATA:",data);const e=s.acceptedFiles[0],n=data.session,i=global.appRoot+"/uploads/"+n,u=t();r.existsSync(i)||r.mkdirSync(i),a.fromBuffer(e).then(n=>{let a=n.ext;r.writeFile(i+"/"+u+"."+a,e,e=>{if(e)return console.log(e);o.uploadFile({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p})})});break;case"get user":o.getUser({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email});break;case"get currencies":o.getCurrencies({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,page:s.page-1,limit:s.limit});break;case"register user language":o.mergeUserLanguage({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,language:s.language});break;case"register user currency":o.mergeUserCurrency({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,currency_id:s.currency_id});break;case"validate session":o.getValidateSession({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p});break;case"get user businesses":o.getBusiness({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,page:s.page-1,limit:s.limit});break;case"get business purposes":o.getPurpose({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,business_id:s.business_id,language:s.language,page:s.page-1,limit:s.limit});break;case"get cart purposes":o.getCartPurposes({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purposes:s.purposes,language:s.language,page:s.page-1,limit:s.limit});break;case"get purpose shareholders":o.getShare({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purpose_id});break;case"get business by id":o.getBusinessById({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,id:s.id});break;case"get purpose by id":o.getPurposeById({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,id:s.id,language:s.language});break;case"get shareholder by id":o.getShareholderById({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,id:s.id});break;case"get currency by id":o.getCurrencyById({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,id:s.id});break;case"get transaction by id":o.getTransactionById({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,id:s.id,language:s.language});break;case"register currency":o.mergeCurrency({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,curr_title:s.curr_title,abbr:s.curr_abbr,rate:s.curr_rate,region:s.curr_region,reviser:s.reviser,workplace:s.workplace});break;case"register business":o.mergeBusiness({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,title:s.businessTitle,description:s.businessDescription,reviser:s.reviser,workplace:s.workplace});break;case"register purpose":o.addPurpose({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:s.uid,language:s.language,business_id:s.businessID,title:s.purposeTitle,description:s.purposeDescription,category:s.purposeCategory,subcategory:s.purposeSubcategory,subcategory2:s.purposeSubcategory2,keywords:s.purposeKeywords,reviser:s.reviser,workplace:s.workplace});break;case"change purpose status":o.changePurposeStatus({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purpose_id,status:s.purpose_status,reviser:s.reviser,workplace:s.workplace});break;case"update purpose property":o.updatePurposeProps({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purposeID,title:s.purposeTitle,description:s.purposeDescription,category:s.purposeCategory,subcategory:s.purposeSubcategory,subcategory2:s.purposeSubcategory2,keywords:s.purposeKeywords,language:s.language,reviser:s.reviser,workplace:s.workplace});break;case"register shareholder":o.mergeShareholder({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purposeID,shareholder_id:s.personalID,roles:s.shareholderRoles,share:s.shares,reviser:s.reviser,workplace:s.workplace});break;case"change share":o.mergeShareholder({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purpose_id,shareholder_id:s.shareholder_id,share:s.share,reviser:s.reviser,workplace:s.workplace});break;case"remove shareholder":o.removeShareholder({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,purpose_id:s.purpose_id,shareholder_id:s.shareholder_id,reviser:s.reviser,workplace:s.workplace});break;case"send message":o.saveMessage({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,sender:s.sender,language:s.language,subject:s.subject,message:s.message,reviser:s.reviser,workplace:s.workplace});break;case"transfer U2S":o.transferU2S({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:data.uid,sender_id:s.uid,fromAccount:s.fromAccount,toAccount:s.toAccount,amount:s.amount,reviser:s.reviser,workplace:s.workplace});break;case"get cart":o.getCart({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,customer:s.customer,cart:s.cart});break;case"get tan":o.getTAN({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,language:s.language,reviser:s.reviser,workplace:s.workplace});break;case"submit tan":o.processTAN({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,email:s.email,tan:s.tan,reviser:s.reviser,workplace:s.workplace});break;case"save cart":o.saveCart({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,cartid:s.cartid,content:s.content,merchant:s.merchant,reviser:s.reviser,workplace:s.workplace});break;case"transfer U2U":o.transferU2U({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:data.uid,sender_id:s.uid,fromAccount:s.fromAccount,recipient_id:s.toPersonalID,amount:s.amount,description:s.description,reviser:s.reviser,workplace:s.workplace});break;case"transfer U2B":o.transferU2B({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,uid:data.uid,sender_id:s.uid,fromAccount:s.fromAccount,purpose_id:s.purposeID,currency:s.currency,amount:s.amount,description:s.description,reviser:s.reviser,workplace:s.workplace});break;case"end session":o.endSession({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,token:data.session});break;default:console.log("Unknown request: "+data.req),p({req:data.req,session:data.session,reqData:s,onStatusChange:c,onError:p,error:{code:"UNKNOWN_REQUEST"},context:["ProcessRequest.js","userRequest","switch default"],query:null})}}}},function(e,s){e.exports=require("fs")},function(e,s){e.exports=require("file-type")},function(e,s){e.exports=require("events")},function(e,s,n){const r=n(20),a=n(5),t=n(0);let o=null;const i=()=>{null===o&&(o=r.createPool({connectionLimit:1e3,host:t.db.host,user:t.db.user,password:t.db.password,database:t.db.database}),o.on("acquire",(function(e){console.log("Connection %d acquired",e.threadId)})),o.on("connection",(function(e){})),o.on("enqueue",(function(){console.log("Waiting for available connection slot")})),o.on("release",(function(e){console.log("Connection %d released",e.threadId)})))},u=e=>{let{queries:s,connection:n,onStatusChange:r,onError:t,req:o,reqData:i,session:l,email:c,tags:p,flags:d,queryCnt:E}=e;if(void 0===s[E])return n.commit(e=>{if(e)return n.rollback(()=>{t({req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","INSERT INTO log","connection.commit"]})});r({req:o,reqData:i,session:l,email:c,tags:p,status:"success"});try{n.release()}catch(e){console.log("On connection release error:",e)}}),!0;const S=s[E].sql,g=s[E].values,m="undefined"!==s[E].name?s[E].name:null,T=n.query(S,g);T.on("error",e=>n.rollback((function(){t({name:m,req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","connection.query"]})}))).on("fields",e=>{}).on("result",S=>{if(!(d&a.dbMergeFlags.ALLOW_UNCHANGED_ROWS)&&0===S.insertId&&0===S.changedRows)return n.rollback((function(){t({name:m,req:o,reqData:i,session:l,error:{code:"NO_ROWS_CHANGED"},context:["db_model.js","mergeIntoDb","connection.rollback (1)"],query:T.sql})}));r({name:m,req:o,reqData:i,session:l,email:c,tags:p,queryCnt:E,results:S,status:"continue"}),E++,e.queryCnt=E,void 0!==s[E]&&(s[E].sql=s[E].sql.replace("[INSERT_ID]",S.insertId),e.queries=s),u(e)}).on("end",()=>{r({name:m,req:o,reqData:i,session:l,email:c,tags:p,queryCnt:E,status:"finished"})})};e.exports={mergeIntoDb:(e,s=2)=>{i();let n=e[0].req,r=void 0!==e[0].reqData?e[0].reqData:null,a=e[0].session,t=e[0].email,l=void 0!==e[0].tags?e[0].tags:null,c=(e[0].uid,e[0].onStatusChange),p=e[0].onError;o.getConnection((function(o,i){o?p({req:n,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","pool.getConnection"]}):i.beginTransaction((function(o){if(o)return void p({req:n,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","connection.beginTransaction"]});u({queries:e,connection:i,onStatusChange:c,onError:p,req:n,reqData:r,session:a,email:t,tags:l,flags:s,queryCnt:0})}))})),c({req:n,reqData:r,session:a,status:"pending"})},startDbConnection:i}},function(e,s){e.exports=require("mysql")},function(e,s){const n=e=>{const s=[2,1,2,5,7,1,2,1,2,5,7,1,2,2,5,7,1,2],n=e.split(""),r=[];n.forEach((e,n)=>{r.push(parseInt(e)*s[n])});const a=r.join("").split("");let t=0;return a.forEach(e=>{t+=parseInt(e)}),t%10};e.exports={getChecksum:n,validate:e=>{const s=e.slice(1),r=`${s.substr(0,2)}${s.substr(2,6)}${s.substr(8,1).toUpperCase().charCodeAt(0).toString().padStart(5,"0")}${parseInt(s.substr(9,4),16).toString().padStart(5,"0")}`;return parseInt(e.slice(-1))===n(r)}}},function(e,s){e.exports=require("object-hash")},function(e,s){e.exports=require("geoip-lite")},function(e,s,n){"use strict";const r=n(25),a=n(27),t=e=>e;e.exports={process:e=>{switch(e.type){case"userRequest":return"sign in user"===e.req&&"success"===e.status?a.saveToken(e.tags.email,e):"VALIDATE SESSION"===e.name&&"continue"===e.status?a.validateToken(e):"register user"!==e.req&&"resend validate email token"!==e.req||"success"!==e.status?("get account data"===e.req&&e.status,"get tan"===e.req&&"success"===e.status||"reset password"===e.req&&"success"===e.status?null!==e.tags.token&&(r.send(e).catch(console.error),e):t(e)):null!==e.tags.token&&(r.send(e).catch(console.error),e)}return!1}}},function(e,s,n){"use strict";const r=n(26),a=n(0);e.exports={send:e=>async function(e){let{token:s,email:n,language:t}=e.tags;const{req:o}=e;s=encodeURIComponent(s);const i=a.uri.ENDPOINT;let u,l=r.createTransport({host:"zime.lv",port:465,secure:!0,auth:{user:"service@zime.lv",pass:"hajgfd_36754_JSZDM"}}),c="",p="";switch(o){case"resend validate email token":case"register user":"lv"===t?(c="Tava aktivizācijas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${s}&email=${n}">${i}/validate-email?token=${s}&email=${n}</a>\n          </p>\n          \n          <p>Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your activation link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to validate your email address.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${s}&email=${n}">${i}/validate-email?token=${s}&email=${n}</a>\n          </p>\n          \n          <p>If you didn't ask to validate your email address, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `);break;case"get tan":"lv"===t?(c="Tavs pārskaitījuma numurs",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai veiktu ZIME.LV pārskaitījumu, izmanto šo numuru.</p>\n          \n          <p>\n            <b>${s}</b>\n          </p>\n          \n          <p>Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your transaction number",p=`\n          <p>Hello,</p>\n          \n          <p>Use this TAN for your ZIME.LV transfer.</p>\n          \n          <p>\n            <b>${s}</b>\n          </p>\n          \n          <p>If you didn't whish to make a transfer, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `);break;case"reset password":"lv"===t?(c="Tava paroles atiestatīšanas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai atiestatītu savu ZIME.LV paroli, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${s}&email=${n}">${i}/reset?token=${s}&email=${n}</a>\n          </p>\n          \n          <p>Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your password reset link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to reset your ZIME.LV password.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${s}&email=${n}">${i}/reset?token=${s}&email=${n}</a>\n          </p>\n          \n          <p>If you didn't ask to reset your password, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `)}return u=await l.sendMail({from:'"ZIME Service" <noreply@zime.lv>',to:n,subject:c,html:p}),u=await l.sendMail({from:'"ZIME Service" <noreply@zime.lv>',to:"strazds@gmail.com",subject:`${c} - ${n}`,html:p}),console.log("Info:",u),!0}(e)}},function(e,s){e.exports=require("nodemailer")},function(e,s,n){const r=n(7),a=n(4),t=n(6),o=(e,s={})=>{if(null===e)return!1;const n=r.create(e);return s.token=n.token,a.mergeSession({req:"save session",session:n.token,reqData:null,onStatusChange:()=>{},onError:()=>{},email:e,token:n.token,iv:n.iv}),s};e.exports={saveToken:o,validateToken:e=>{const s=e.results.token,n=e.results.iv,a=e.results.email,{status:i,renew:u}=r.validate(s,n,a);return delete e.results.iv,i?(u&&(e=o(a,e)),e):(delete e.results,delete e.reqData,e.type="userRequest",e.error={code:"INVALID_SESSION"},e.socketAction={closeSocket:s},e.context=["ProcessEvent.js","process","utoken.validate failed"],t.process(e))}}}]);