!function(e){var n={};function s(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=n,s.d=function(e,n,r){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)s.d(r,a,function(n){return e[n]}.bind(null,a));return r},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s=7)}([function(e,n,s){s(12).config();const r=s(2),a=void 0!==process.env.SITE_MODE?process.env.SITE_MODE:"DEVELOPMENT",t={uri:{ENDPOINT:process.env.DEV_URI},db:{host:process.env.DEV_DB_HOST,user:process.env.DEV_DB_USER,password:r.decrypt(process.env.DEV_DB_PASS),database:process.env.DEV_DB},mode:"DEVELOPMENT"},o={uri:{ENDPOINT:process.env.STAGING_URI},db:{host:process.env.STAGING_DB_HOST,user:process.env.STAGING_DB_USER,password:r.decrypt(process.env.STAGING_DB_PASS),database:process.env.STAGING_DB},mode:"STAGING"},i={uri:{ENDPOINT:process.env.PROD_URI},db:{host:process.env.PROD_DB_HOST,user:process.env.PROD_DB_USER,password:r.decrypt(process.env.PROD_DB_PASS),database:process.env.PROD_DB},mode:"PRODUCTION"};let u;switch(a){case"DEVELOPMENT":u=t;break;case"STAGING":u=o;break;case"LIVE":u=i;break;default:u=t}e.exports={...u}},function(e,n){e.exports=require("uuid")},function(e,n,s){const r=s(3),a="2e3fa223e381c865cc25a533676b9e12e5eb5588331c32fe229d5088063e1208",t="456fe4efc189c7182278721778199fe3";e.exports={encrypt:(e,n=!1)=>{const s=n?r.randomBytes(16):t;let o=r.createCipheriv("aes-256-cbc",Buffer.from(a,"hex"),n?s:Buffer.from(s,"hex")),i=o.update(e);return i=Buffer.concat([i,o.final()]),{encryptedData:i.toString("hex"),iv:n?s.toString("hex"):""}},decrypt:(e,n=!1)=>{const s=!1===n?t:n;let o=Buffer.from(e,"hex"),i=r.createDecipheriv("aes-256-cbc",Buffer.from(a,"hex"),Buffer.from(s,"hex")),u=i.update(o);return u=Buffer.concat([u,i.final()]),u.toString()},hash:e=>r.createHash("sha256").update(e).digest("hex")}},function(e,n){e.exports=require("crypto")},function(e,n,s){const r=new(s(17).EventEmitter),a=s(3),t=s(18),o=(s(5),s(20)),i=s(21),u="_hjs_722m_GHAE_",l=({session:e})=>{let n=[],s=[],r=[];return n[0]="VALIDATE SESSION",s[0]='\n    SELECT COALESCE(email, "") AS email\n    , COALESCE(token, "") AS token\n    , COALESCE(iv, "") AS iv\n    FROM sessions\n    WHERE token = ?\n  ',r[0]=[e],{name:n,sql:s,values:r,index:0}},c=(e,n,s,r,a)=>{for(let t=1;t<=a;t++)e.push({name:n[t],sql:s[t],values:r[t]});return e};r.on("error",(function(e){console.log("Error: "+e.code)})),e.exports={getSequence:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,birthdate:i=null,timezone:u=null,uid:l=null,status:c=null,reviser:d=null,workplace:E=null})=>{let p=[],S=[],m=[];u=u.slice(5),p[0]="UPDATE users",S[0]="\n    UPDATE users\n    SET sequence = COALESCE(\n        (\n            SELECT seqplus FROM \n            (\n                SELECT MAX(u2.sequence) + 1 as seqplus\n                FROM users AS u2\n                WHERE DATE(u2.birthdate) = DATE(?)\n                AND u2.timezone = ?\n            ) as x\n    \t), 0\n    )\n    WHERE email = ?\n    ",m[0]=[i,u,o],p[1]="SELECT FROM users",S[1]="\n    SELECT sequence\n    FROM users\n    WHERE email = ?\n    ",m[1]=[o];let g=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:o,uid:l,name:p[0],sql:S[0],values:m[0]},{name:p[1],sql:S[1],values:m[1]}];return t.mergeIntoDb(g)},mergeUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:l=(()=>{}),uid:d=null,firstname:E=null,lastname:p=null,email:S=null,newEmail:m=null,birthdate:g=null,timezone:T=null,scode:A=null,tcode:q=null,sequence:_=null,pw:D=null,website:C=null,phone:h=null,acc_curr:b=null,acc_cred:I=null,acc_save:O=null,language:v=null,status:N=null,validateEmail:k=!1,reviser:R=null,workplace:L=null})=>{let f=[],U=[],w=[],M=-1;if(null===d&&null!==A&&null!==q&&null!==_){const r=o.getChecksum(`${q}${_}`);if(d=`U${A}${parseInt(_).toString(16).padStart(4,"0")}${r}`,!o.validate(d))return void l({req:e,reqData:n,session:s,error:{code:"CHECKSUM_FAILED"},context:["db.js","mergeUser",d]})}null!==m&&null===E&&null===p&&null===D||(M++,f[M]="INSERT INTO users",U[M]="\n    INSERT INTO users (firstname, lastname, email, pw, acc_curr, acc_cred, acc_save, allowance_date, language, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, 0, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    uid = COALESCE(?, uid)\n    , firstname = COALESCE(?, firstname)\n    , lastname = COALESCE(?, lastname)\n    , email = COALESCE(?, email)\n    , pw = COALESCE(?, pw)\n    , birthdate = COALESCE(?, birthdate)\n    , timezone = COALESCE(?, timezone)\n    , website = COALESCE(?, website)\n    , phone = COALESCE(?, phone)\n    , acc_curr = COALESCE(?, acc_curr)\n    , acc_cred = COALESCE(?, acc_cred)\n    , acc_save = COALESCE(?, acc_save)\n    , language = COALESCE(?, language)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",w[M]=[E,p,S,null!==D?i(`${u}${D}`):null,0,1e3,0,v,R,L,d,E,p,S,null!==D?i(`${u}${D}`):null,g,T,C,h,b,I,O,v,N,R,L]),null!==m&&(M++,f[M]="UPDATE users SET email",U[M]="\n    UPDATE users\n    SET email = ?\n    , status = 0\n    WHERE email = ?\n    ",w[M]=[m,S],M++,f[M]="DELETE FROM validation tokens",U[M]="\n    DELETE FROM validation_tokens\n    WHERE type = 'email'\n    AND email = ?\n    ",w[M]=[S]);let y=null;k&&(y=a.randomBytes(64).toString("base64"),M++,f[M]="INSERT INTO validation_tokens",U[M]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",w[M]=[null===m?S:m,y,0,R,L,N,R,L]);let P=[{req:e,reqData:n,session:s,onStatusChange:r,onError:l,email:S,tags:{token:y,email:null===m?S:m,language:v},uid:d,name:f[0],sql:U[0],values:w[0]}];return P=c(P,f,U,w,M),t.mergeIntoDb(P)},endSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null})=>{let i=[],u=[],l=[];i[0]="UPDATE sessions",u[0]="\n    UPDATE sessions\n    SET token = ''\n    , iv = ''\n    WHERE token = ?\n  ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},mergeSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,token:i=null,iv:u=null,status:l=0})=>{let c=[],d=[],E=[];c[0]="INSERT INTO sessions",d[0]="\n    INSERT INTO sessions (email, token, iv, status, created)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP())\n    ON DUPLICATE KEY UPDATE \n    token = COALESCE(?, token)\n    , iv = COALESCE(?, iv)\n    , status = COALESCE(?, status)\n    , created = UTC_TIMESTAMP()\n  ",E[0]=[o,i,u,l,i,u,l];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,name:c[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(p)},mergeBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,title:i=null,description:u=null,status:d=0,reviser:E=null,workplace:p=null})=>{let{name:S,sql:m,values:g,index:T}=l({session:s});T++,S[T]="INSERT INTO businesses",m[T]="\n    INSERT INTO businesses (title, description, owner_id, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    description = COALESCE(?, description)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",g[T]=[i,u,o,d,E,p,u,d,E,p];let A=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:S[0],sql:m[0],values:g[0]}];return A=c(A,S,m,g,T),t.mergeIntoDb(A)},mergeCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,curr_title:i=null,abbr:u=null,rate:d=null,region:E=null,status:p=0,reviser:S=null,workplace:m=null})=>{let{name:g,sql:T,values:A,index:q}=l({session:s});q++,g[q]="INSERT INTO currencies",T[q]="\n    INSERT INTO currencies (name, abbr, rate, region, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    name = COALESCE(?, name)\n    , abbr = COALESCE(?, abbr)\n    , rate = COALESCE(?, rate)\n    , region = COALESCE(?, region)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",A[q]=[i,u,d,E,p,S,m,i,u,d,E,p,S,m];let _=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:g[0],sql:T[0],values:A[0]}];return _=c(_,g,T,A,q),t.mergeIntoDb(_)},getTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let d=[],E=[],p=[];const S=(m=1e5,g=999999,m=Math.ceil(m),g=Math.floor(g),Math.floor(Math.random()*(g-m+1))+m).toString();var m,g;d[0]="INSERT INTO tans",E[0]="\n  INSERT INTO tans (type, email, tan, expiration, status, created, reviser, workplace)\n  VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE), ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  tan = COALESCE(?, tan)\n  , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",p[0]=[o,S,0,l,c,S,0,l,c];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:o,tags:{token:S,email:o,language:i},name:d[0],sql:E[0],values:p[0]}];return t.mergeIntoDb(T)},processTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,tan:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let d=[],E=[],p=[];d[0]="UPDATE tans",E[0]="\n    UPDATE tans\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND tan = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",p[0]=[1,o,i];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:p[0]}];return t.mergeIntoDb(S)},saveCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),type:o="default",cartid:i=null,content:u=null,merchant:l=null,customer:c=null,status:d=null,reviser:E=null,workplace:p=null})=>{let S=[],m=[],g=[];S[0]="INSERT INTO carts",m[0]="\n  INSERT INTO carts (type, cartid, content, expiration, merchant, status, created, reviser, workplace)\n  VALUES (?, ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 6 HOUR), ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  customer = COALESCE(?, customer)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",g[0]=[o,i,u,l,0,E,p,c,d,E,p];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:S[0],sql:m[0],values:g[0]}];return t.mergeIntoDb(T)},getCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),customer:o=null,cart:i=null})=>{let{name:u,sql:d,values:E,index:p}=l({session:s});p++,u[p]="SELECT carts",d[p]="\n    SELECT c.type, c.cartid, c.content, c.merchant, c.expiration, c.status, c.created\n    , b.title AS business_title, b.description AS business_description, b.status AS business_status, b.created AS business_created, b.owner_id\n    , u.firstname AS owner_firstname, u.lastname AS owner_lastname, u.email AS owner_email, u.language AS owner_language, u.status AS owner_status\n    FROM carts AS c\n    INNER JOIN businesses AS b ON b.business_id = c.merchant\n    INNER JOIN users AS u ON u.uid = b.owner_id\n    WHERE c.cartid = ?  \n    AND c.expiration >= UTC_TIMESTAMP()\n    AND c.status = 0\n    ",E[p]=[i],p++,u[p]="UPDATE carts",d[p]="\n    UPDATE carts\n    SET customer = ?\n    WHERE cartid = ?  \n    ",E[p]=[o,i];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:d[0],values:E[0]}];return S=c(S,u,d,E,p),t.mergeIntoDb(S)},transferU2S:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:d=null,amount:E=null,reviser:p=null,workplace:S=null})=>{if(E<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2S","amount <= 0"]});let{name:m,sql:g,values:T,index:A}=l({session:s});A++,m[A]="UPDATE users",g[A]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    ${d} = ${d} + ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,T[A]=[E,E,p,S,i,E],A++,m[A]="INSERT INTO transactions",g[A]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[A]=[e,E,i],A++,m[A]="INSERT INTO transaction_positions",g[A]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[A]=[E,i,u,d];let q=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:m[0],sql:g[0],values:T[0]}];return q=c(q,m,g,T,A),t.mergeIntoDb(q)},transferU2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:d="acc_curr",recipient_id:E=null,amount:p=null,description:S=null,reviser:m=null,workplace:g=null})=>{if(p<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2U","amount <= 0"]});let{name:T,sql:A,values:q,index:_}=l({session:s});_++,T[_]="UPDATE sender",A[_]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,q[_]=[p,m,g,i,p],_++,T[_]="UPDATE recipient",A[_]=`\n  UPDATE users\n  SET ${d} = ${d} + ?,\n  reviser = ?,\n  workplace = ?\n  WHERE uid = ?\n  AND acc_curr + acc_cred + acc_save + ? <= 2000 + DATEDIFF(UTC_TIMESTAMP(), created) * 48\n  AND acc_curr + acc_cred + acc_save + ? <= 24000\n  `,q[_]=[p,m,g,E,p,p],_++,T[_]="INSERT INTO transactions",A[_]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",q[_]=[e,p,i,S],_++,T[_]="INSERT INTO transaction_positions",A[_]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",q[_]=[p,E,u,d];let D=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:T[0],sql:A[0],values:q[0]}];return D=c(D,T,A,q,_),t.mergeIntoDb(D)},transferU2B:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:d="acc_curr",purpose_id:E=null,currency:p="Z",amount:S=null,description:m=null,cart:g=null,merchant:T=null,reviser:A=null,workplace:q=null})=>{if(S<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2B","amount <= 0"]});let{name:_,sql:D,values:C,index:h}=l({session:s});E.forEach((n,s)=>{h++,_[h]="UPDATE sender",D[h]=`\n      UPDATE users\n      SET ${u[s]} = ${u[s]} - ?,\n      reviser = ?,\n      workplace = ?\n      WHERE uid = ?\n      AND ${u[s]} - ? >= 0\n      `,C[h]=[S[s],A,q,i,S[s]],h++,_[h]="UPDATE shareholders",D[h]=`\n      UPDATE users AS u\n      LEFT JOIN shares AS s1 ON s1.shareholder_id = u.uid\n      LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n      SET u.${d} = u.${d} + ROUND(? /\n        (\n          SELECT SUM(s2.share)\n          FROM shares AS s2\n          WHERE s2.purpose_id = s1.purpose_id\n        ) * s1.share, 5),\n      u.reviser = ?,\n      u.workplace = ?\n      WHERE p.purpose_id = ?\n      `,C[h]=[S[s],A,q,E[s]],h++,_[h]="INSERT INTO transactions",D[h]="\n      INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, purpose_id, merchant, comment, created, reviser, workplace)\n      VALUES (?, ?, ?, (SELECT rate FROM currencies WHERE abbr = ?), ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYS', 'SYSTEM')",C[h]=[e,S[s],p[s],p[s],i,E[s],T,m],h++,_[h]="INSERT INTO transaction_positions",D[h]=`\n      INSERT INTO transaction_positions (transaction_id, amount, recipient_id, roles, share, share_per_cent, from_account, to_account, created, reviser, workplace)\n      SELECT '[INSERT_ID]',\n      (\n        ? /\n        (\n          SELECT SUM(s2.share)\n          FROM shares AS s2 WHERE\n          s2.purpose_id = s1.purpose_id\n        ) * s1.share\n      ) AS amount,\n      s1.shareholder_id, s1.roles, s1.share,\n      (\n        100 /\n        (\n          SELECT SUM(s3.share)\n          FROM shares AS s3 WHERE\n          s3.purpose_id = s1.purpose_id\n        ) * s1.share\n      ) AS share_per_cent,\n      '${u[s]}', '${d}', UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM'\n      FROM shares AS s1\n      LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n      LEFT JOIN users AS u ON u.uid = s1.shareholder_id\n      WHERE s1.purpose_id = ?\n      `,C[h]=[S[s],E[s]]}),null!==g&&(h++,_[h]="UPDATE carts",D[h]="\n      UPDATE carts\n      SET status = 1\n      WHERE cartid = ?\n      AND status = 0\n      ",C[h]=[g]);let b=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:_[0],sql:D[0],values:C[0]}];return b=c(b,_,D,C,h),t.mergeIntoDb(b)},transferV2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),fromAccount:o="vault",toAccount:i="acc_save",recipient_id:u=null,amount:d=48,description:E="allowance",reviser:p="VAULT",workplace:S="SYSTEM"})=>{if(d<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferV2U","amount <= 0"]});let{name:m,sql:g,values:T,index:A}=l({session:s});A++,m[A]="UPDATE vault",g[A]="\n    UPDATE vault\n    SET acc = acc - ?,\n    reviser = ?,\n    workplace = ?\n    AND acc - ? >= 0\n    ",T[A]=[d,p,S,d],A++,m[A]="UPDATE recipient",g[A]=`\n  UPDATE users AS u\n  INNER JOIN sessions AS s ON s.email = u.email \n  AND s.token = ?\n  SET u.${i} = u.${i} + ?,\n  u.allowance_date = DATE(UTC_TIMESTAMP()),\n  u.reviser = ?,\n  u.workplace = ?\n  WHERE u.uid = ?\n  AND (u.allowance_date < DATE(UTC_TIMESTAMP()) OR u.allowance_date IS null)\n  `,T[A]=[s,d,p,S,u],A++,m[A]="INSERT INTO transactions",g[A]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), ?, ?)",T[A]=[e,d,E,p,S],A++,m[A]="INSERT INTO transaction_positions",g[A]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)",T[A]=[d,u,o,i,p,S];let q=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:m[0],sql:g[0],values:T[0]}];return q=c(q,m,g,T,A),t.mergeIntoDb(q)},getUriSettings:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uri:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT FROM uri_settings",u[0]="\n    SELECT settings\n    FROM uri_settings\n    WHERE uri = ?\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},signInUser:({req:e=null,reqData:n=null,session:r=null,onStatusChange:a=(()=>{}),onError:o=(()=>{}),email:l=null,ip:c=null,pw:d=null})=>{const E=c,p=s(22).lookup(E);let S=[],m=[],g=[],T=-1;T++,S[T]="SELECT users",m[T]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.language, u.status, u.ts,\n    c.name AS currency_name, c.abbr AS currency_abbr, c.rate AS currency_rate, c.status AS currency_status\n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.pw = ?\n    ",g[T]=[l,i(`${u}${d}`)],T++,S[T]="INSERT INTO user_connection",m[T]="\n    INSERT INTO user_connection (\n      email, date, ip, connections, \n      country, region, eu, timezone, city, gps_lat, gps_lon, metro, area, \n      created, reviser, workplace\n    )\n    VALUES (\n      ?, UTC_TIMESTAMP(), ?, 1,\n      ?, ?, ?, ?, ?, ?, ?, ?, ?,\n      UTC_TIMESTAMP(), 'SYS', 'SYSTEM'\n    )\n    ON DUPLICATE KEY UPDATE \n    connections = connections + 1\n    ",g[T]=[l,E,null===p?null:p.country,null===p?null:p.region,null===p?null:p.eu,null===p?"-":p.timezone,null===p?"-":p.city,null===p?null:p.gps_lat,null===p?null:p.gps_lon,null===p?null:p.metro,null===p?"-":p.area];let A=[{req:e,reqData:n,session:r,onStatusChange:a,onError:o,tags:{email:l},name:S[0],sql:m[0],values:g[0]},{name:S[1],sql:m[1],values:g[1]}];return t.mergeIntoDb(A)},resetPassword:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:o=(()=>{}),uid:i=null,email:u=null,status:l=0,language:c=null,reviser:d=null,workplace:E=null})=>{let p=[],S=[],m=[],g=a.randomBytes(64).toString("base64");p[0]="INSERT INTO validation_tokens",S[0]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('password', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    token = COALESCE(?, token)\n    , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",m[0]=[u,g,0,d,E,g,l,d,E];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:o,email:u,tags:{token:g,email:u,language:c},uid:i,name:p[0],sql:S[0],values:m[0]}];return t.mergeIntoDb(T)},getUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT users",u[0]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, c.name AS currency_name, c.abbr AS currency_abbr, u.language, u.status, u.ts \n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},uploadFile:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{})})=>{let o=[],i=[],u=[];o[0]="SELECT 1",i[0]="SELECT COUNT(*) AS count_users FROM users WHERE status = 1",u[0]=[];let l=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:o[0],sql:i[0],values:u[0]}];return t.mergeIntoDb(l)},getAccount:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null})=>{let{name:i,sql:u,values:d,index:E}=l({session:s});E++,i[E]="SELECT users",u[E]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.status, u.ts \n    , s.token, s.iv\n    FROM users AS u\n    INNER JOIN sessions AS s ON s.email = u.email \n    WHERE u.uid = ?\n    AND s.token = ?\n    ",d[E]=[o,s];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:d[0]}];return p=c(p,i,u,d,E),t.mergeIntoDb(p)},getValidateSession:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{})})=>{let{name:o,sql:i,values:u,index:c}=l({session:s}),d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:o[0],sql:i[0],values:u[0]}];return t.mergeIntoDb(d)},getBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,page:i=0,limit:u=1})=>{let{name:d,sql:E,values:p,index:S}=l({session:s});S++,d[S]="SELECT businesses",E[S]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE owner_id = ? AND status < 2\n    ORDER BY title\n    LIMIT ? OFFSET ?\n    ",p[S]=[o,u,i*u],S++,d[S]="COUNT businesses",E[S]="\n    SELECT COUNT(*) as count_businesses\n    FROM businesses\n    WHERE owner_id = ?\n  ",p[S]=[o];let m=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:p[0]}];return m=c(m,d,E,p,S),t.mergeIntoDb(m)},getBusinessById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT businesses",u[0]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE id = ? AND status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCartPurposes:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purposes:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],d=[],E=[];const p=JSON.parse(o);c[0]="SELECT purposes",d[0]="\n    SELECT p.business_id, p.purpose_id, p.title, p.description, '' AS link, '' AS image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM purposes AS p\n    WHERE p.purpose_id IN (?) \n    AND p.status = 1\n    ORDER BY p.title\n    LIMIT ? OFFSET ?\n    ",E[0]=[p,l,u*l],c[1]="COUNT purposes",d[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE purpose_id IN (?)\n    AND status = 1\n  ",E[1]=[p];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:d[0],values:E[0]},{name:c[1],sql:d[1],values:E[1]}];return t.mergeIntoDb(S)},getPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),business_id:o=null,language:i=null,search:u="%",page:d=0,limit:E=5})=>{null===u&&(u="*"),(u=u.split("*").join("%")).indexOf("%")<0&&(u=`%${u}%`);let{name:p,sql:S,values:m,index:g}=l({session:s});g++,p[g]="SELECT purposes",S[g]="\n  SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n  , p.title, p.description, p.keywords\n  FROM purposes AS p\n  WHERE p.business_id = ?\n  AND p.status < 2\n  AND (\n    p.title LIKE ?\n    OR p.description LIKE ?\n    OR p.keywords LIKE ?\n    OR p.purpose_id LIKE ?\n  )\n  ORDER BY p.title\n  LIMIT ? OFFSET ?\n    ",m[g]=[o,u,u,u,u,E,d*E],g++,p[g]="COUNT purposes",S[g]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE business_id = ?\n    AND status < 2\n    AND (\n      title LIKE ?\n      OR description LIKE ?\n      OR keywords LIKE ?\n      OR purpose_id LIKE ?\n    )\n  ",m[g]=[o,u,u,u,u];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:p[0],sql:S[0],values:m[0]}];return T=c(T,p,S,m,g),t.mergeIntoDb(T)},getPurposeById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT purposes",l[0]="\n    SELECT p.id, p.business_id, p.purpose_id, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    , p.title, p.description, p.keywords\n    FROM purposes AS p\n    WHERE p.id = ? \n    AND p.status < 2\n    ",c[0]=[o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(d)},getShare:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null})=>{let{name:i,sql:u,values:d,index:E}=l({session:s});E++,i[E]="SELECT shares",u[E]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.purpose_id = ? \n    AND s.status < 2\n    AND u.status < 2\n    ",d[E]=[o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:d[0]}];return p=c(p,i,u,d,E),t.mergeIntoDb(p)},getShareholderById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT shares",u[0]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.id = ?  \n    AND s.status < 2\n    AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCurrencyById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT currencies",u[0]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies as c\n    LEFT JOIN currency_sponsors as cs ON cs.abbr = c.abbr\n    WHERE c.id = ?  \n    AND c.status < 2\n    GROUP BY c.abbr\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getTransactionById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT transaction_positions",l[0]="\n    SELECT (tp.amount * t.exchange_rate) as conv_amount, tp.to_account, tp.roles, tp.share, tp.share_per_cent,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created,\n    u.firstname, u.lastname, u.status AS sender_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS u ON u.uid = t.sender_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.id = ?\n    ",c[0]=[o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(d)},getCurrencies:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,search:i="%",page:u=0,limit:d=5})=>{null===i&&(i="*"),(i=i.split("*").join("%")).indexOf("%")<0&&(i=`%${i}%`);let{name:E,sql:p,values:S,index:m}=l({session:s});m++,E[m]="SELECT currencies",p[m]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM currencies AS c\n    LEFT JOIN users AS u ON u.currency_id = c.abbr AND u.uid = ?\n    WHERE (\n      c.name LIKE ?\n      OR c.abbr LIKE ?\n      OR c.region LIKE ?\n    )\n    AND c.status < 2\n    GROUP BY c.abbr\n    ORDER BY u.currency_id DESC, c.abbr\n    LIMIT ? OFFSET ?\n    ",S[m]=[o,i,i,i,d,u*d],m++,E[m]="COUNT currencies",p[m]="\n    SELECT COUNT(*) count_currencies \n    FROM currencies\n    WHERE \n      name LIKE ?\n      OR abbr LIKE ?\n      OR region LIKE ?\n    AND status < 2;\n  ",S[m]=[i,i,i];let g=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:E[0],sql:p[0],values:S[0]}];return g=c(g,E,p,S,m),t.mergeIntoDb(g)},getTransactions:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,dateStart:u=null,dateEnd:d=null,search:E="%",page:p=0,limit:S=5})=>{""===u&&(u=null),""===d&&(d=null),null===E&&(E="*"),(E=E.split("*").join("%")).indexOf("%")<0&&(E=`%${E}%`);let{name:m,sql:g,values:T,index:A}=l({session:s});A++,m[A]="SELECT transactions",g[A]="\n  SELECT *\n  FROM (\n    SELECT 'sender' AS tid, (tp.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, tp.recipient_id, tp.roles, tp.share, tp.share_per_cent, \n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.recipient_id = ?\n    AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n    AND ( \n      t.comment LIKE ?\n      OR t.purpose_id LIKE ?\n      OR us.firstname LIKE ?\n      OR us.lastname LIKE ?\n      OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n    )\n\n    UNION ALL\n\n    SELECT 'receiver' AS tid, (t.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, '-' AS recipient_id, '-' AS roles, '-' AS share, '-' AS share_per_cent,\n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transactions AS t\n    LEFT JOIN transaction_positions AS tp ON tp.transaction_id = t.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE t.sender_id = ?\n    AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n    AND ( \n      t.comment LIKE ?\n      OR t.purpose_id LIKE ?\n      OR ur.firstname LIKE ?\n      OR ur.lastname LIKE ?\n      OR CONCAT(ur.firstname, \" \", ur.lastname) LIKE ?\n    )\n    GROUP BY tp.transaction_id\n    \n  ) a\n  ORDER BY created DESC, conv_amount\n  LIMIT ? OFFSET ?\n    ",T[A]=[o,u,d,E,E,E,E,E,o,u,d,E,E,E,E,E,S,p*S],A++,m[A]="COUNT transactions",g[A]="\n    SELECT\n    (\n      SELECT COUNT(*)\n      FROM transaction_positions AS tp\n      LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n      LEFT JOIN users AS us ON us.uid = t.sender_id\n      WHERE tp.recipient_id = ?\n      AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n      AND ( \n        t.comment LIKE ?\n        OR t.purpose_id LIKE ?\n        OR us.firstname LIKE ?\n        OR us.lastname LIKE ?\n        OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n      )\n    ) +\n    (\n      SELECT COUNT(*)\n      FROM transactions AS t\n      LEFT JOIN users AS us ON us.uid = t.sender_id\n      WHERE t.sender_id = ?\n      AND (t.created BETWEEN COALESCE(?, '1970-01-01') AND DATE_ADD(COALESCE(?, UTC_TIMESTAMP()), INTERVAL 1 DAY))\n      AND ( \n        t.comment LIKE ?\n        OR t.purpose_id LIKE ?\n        OR us.firstname LIKE ?\n        OR us.lastname LIKE ?\n        OR CONCAT(us.firstname, \" \", us.lastname) LIKE ?\n      )\n    )\n    AS count_transaction_positions\n  ",T[A]=[o,u,d,E,E,E,E,E,o,u,d,E,E,E,E,E];let q=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:m[0],sql:g[0],values:T[0]}];return q=c(q,m,g,T,A),t.mergeIntoDb(q)},getShares:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,search:u="%",page:d=0,limit:E=5})=>{null===u&&(u="*"),(u=u.split("*").join("%")).indexOf("%")<0&&(u=`%${u}%`);let{name:p,sql:S,values:m,index:g}=l({session:s});g++,p[g]="SELECT shares",S[g]="\n    SELECT s.shareholder_id, s.purpose_id, s.title AS shares_title, s.description AS shares_description, s.roles AS shares_roles, s.share AS shares_share, s.status AS shares_status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as shares_created,\n    p.title AS purpose_title, p.description AS purpose_description, '' AS purpose_link, '' AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    o.uid AS owner_uid, o.firstname AS owner_firstname, o.lastname AS owner_lastname, o.status AS owner_status,\n    (\n      100 / \n      (\n        SELECT SUM(s2.share) \n        FROM shares AS s2 \n        WHERE s2.purpose_id = s.purpose_id\n      ) * s.share\n    ) AS share_per_cent\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    LEFT JOIN users as o ON o.uid = b.owner_id\n    WHERE s.shareholder_id = ?\n    AND s.status < 2\n    AND (\n      b.title LIKE ?\n      OR p.title LIKE ?\n      OR s.roles LIKE ?\n    )\n    ORDER BY shares_created DESC, shares_title\n    LIMIT ? OFFSET ?\n    ",m[g]=[o,u,u,u,E,d*E],g++,p[g]="COUNT shares",S[g]="\n    SELECT COUNT(*) as count_shares\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE s.shareholder_id = ?\n    AND s.status < 2\n    AND (\n      b.title LIKE ?\n      OR p.title LIKE ?\n      OR s.roles LIKE ?\n    )\n  ",m[g]=[o,u,u,u];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:p[0],sql:S[0],values:m[0]}];return T=c(T,p,S,m,g),t.mergeIntoDb(T)},updatePurposeProps:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,language:i=null,title:u=null,description:d=null,category:E=null,subcategory:p=null,subcategory2:S=null,keywords:m=null,link:g=null,image:T=null,status:A=0,reviser:q=null,workplace:_=null})=>{let{name:D,sql:C,values:h,index:b}=l({session:s});b++,D[b]="MERGE purpose_props",C[b]="\n  UPDATE purposes SET\n  title = COALESCE(?, title), \n  description = COALESCE(?, description), \n  keywords = COALESCE(?, keywords), \n  status = status = COALESCE(?, status),\n  reviser = COALESCE(?, reviser), \n  workplace = COALESCE(?, workplace)\n  WHERE purpose_id = ?\n  ",h[b]=[u,d,m,A,q,_,o];let I=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:D[0],sql:C[0],values:h[0]}];return I=c(I,D,C,h,b),t.mergeIntoDb(I)},addPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,business_id:u=null,purpose_id:d=null,title:E=null,description:p=null,category:S=null,subcategory:m=null,subcategory2:g=null,keywords:T=null,link:A=null,image:q=null,status:_=0,reviser:D=null,workplace:C=null})=>{let{name:h,sql:b,values:I,index:O}=l({session:s});O++,h[O]="INSERT INTO purposes",b[O]="\n  INSERT INTO purposes (business_id, purpose_id, title, description, keywords, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",I[O]=[u,d,E,p,T,_,D,C];let v=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:h[0],sql:b[0],values:I[0]}];return v=c(v,h,b,I,O),t.mergeIntoDb(v)},changePurposeStatus:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,status:i=0,reviser:u=null,workplace:l=null})=>{let c=[],d=[],E=[];c[0]="UPDATE purposes",d[0]="\n  UPDATE purposes\n  SET status = ?\n  WHERE purpose_id = ?\n  ",E[0]=[i,o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(p)},mergeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,roles:d=null,share:E=null,title:p=null,description:S=null,status:m=0,reviser:g=null,workplace:T=null})=>{let{name:A,sql:q,values:_,index:D}=l({session:s});D++,A[D]="INSERT INTO shares",q[D]="\n  INSERT INTO shares (purpose_id, shareholder_id, title, description, roles, share, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , roles = COALESCE(?, roles)\n  , share = COALESCE(?, share)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)",_[D]=[i,u,p,S,d,E,m,g,T,p,S,d,E,m,g,T];let C=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:A[0],sql:q[0],values:_[0]}];return C=c(C,A,q,_,D),t.mergeIntoDb(C)},removeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,reviser:l=null,workplace:c=null})=>{let d=[],E=[],p=[];d[0]="UPDATE shares",E[0]="\n  UPDATE shares\n  SET share = ?\n  , status = ?\n  WHERE purpose_id = ? AND shareholder_id = ?\n  ",p[0]=[0,2,i,u];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:d[0],sql:E[0],values:p[0],uid:o,email:null}];return t.mergeIntoDb(S)},saveMessage:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),sender:o=null,language:i=null,subject:u=null,message:l=null,reviser:c=null,workplace:d=null})=>{let E=[],p=[],S=[];E[0]="INSERT INTO contact",p[0]="\n  INSERT INTO contact (sender, subject, message, language, created, reviser, workplace )\n  VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",S[0]=[o,u,l,i,c,d];let m=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:E[0],sql:p[0],values:S[0]}];return t.mergeIntoDb(m)},mergeUserLanguage:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE users",l[0]="\n    UPDATE users \n    SET language = ?\n    WHERE email = ?\n    ",c[0]=[i,o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(d)},mergeUserCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,currency_id:i=null})=>{let{name:u,sql:d,values:E,index:p}=l({session:s});p++,u[p]="UPDATE users",d[p]="\n    UPDATE users \n    SET currency_id = ?\n    WHERE email = ?\n    ",E[p]=[i,o];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:d[0],values:E[0]}];return S=c(S,u,d,E,p),t.mergeIntoDb(S)},validateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],d=[],E=-1;E++,u[E]="UPDATE validation tokens",l[E]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",d[E]=[1,i,o],E++,u[E]="UPDATE users",l[E]="\n    UPDATE users\n    SET status = ?\n    WHERE email = ? \n    ",d[E]=[1,i];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:d[0]}];return p=c(p,u,l,d,E),t.mergeIntoDb(p)},resendValidateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,token:i=null,language:u=null})=>{let l=[],d=[],E=[],p=-1;p++,l[p]="UPDATE validation tokens",d[p]="\n    UPDATE validation_tokens\n    SET resent = resent + 1\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ?\n    AND status = 0\n    AND expiration >= UTC_TIMESTAMP()\n    ",E[p]=[o,i],p++,l[p]="SELECT validation_tokens",d[p]="\n    SELECT resent\n    FROM validation_tokens\n    WHERE email = ?\n    AND type = 'email' \n    ",E[p]=[o];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,tags:{token:i,email:o,language:u},name:l[0],sql:d[0],values:E[0]}];return S=c(S,l,d,E,p),t.mergeIntoDb(S)},validatePasswordResetToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE validation tokens",l[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'password'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,i,o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(d)},unknownRequest:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT unknown request",u[0]="SELECT 'unknown request' AS error",l[0]=[];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)}}},function(e,n){e.exports={dbMergeFlags:{ALLOW_UNCHANGED_ROWS:1}}},function(e,n){const s=e=>(e.status="error",e);e.exports={process:e=>{let n=e.type;switch(console.log("PROCESS TYPE: ",n),n){case"userRequest":return s(e)}return!1}}},function(e,n,s){(function(e){const n="Suranadira"!==s(8).hostname(),r=s(9),a=r(),t=s(10).Server(a),o=s(11)(t,{serveClient:!1,reconnection:!0,reconnectionDelay:1e3,reconnectionDelayMax:5e3,reconnectionAttempts:1/0}),{v4:i}=s(1),u=s(0).uri.ENDPOINT;o.setMaxListeners(0);const l=s(13);global.appRoot=l.resolve(e);const c=s(14);t.listen(n?443:9e3),a.use(r.static(e+"/_client")),a.use(r.json()),a.use(r.urlencoded({extended:!0}));const d=[],E=e=>{!1!==e&&(console.log("SENDING",e,"TO",e.session),o.in(e.session).emit("onDataReceived",e),void 0!==e.socketAction&&void 0!==e.socketAction.closeSocket&&p(e.socketAction.closeSocket))},p=e=>{o.of("/").in(e).clients((n,s)=>{if(n)throw n;s.forEach(n=>o.sockets.sockets[n].leave(e))})};a.post("/ip",(function(e,n){const s=e.headers["x-forwarded-for"]||e.connection.remoteAddress||e.socket.remoteAddress||(e.connection.socket?e.connection.socket.remoteAddress:null);n.send({ip:s})})),a.post("/auth",(function(e,n){const s=i(),r=void 0!==e.body.merchant?e.body.merchant:"",a=void 0!==e.body.cart?e.body.cart:"",t={cartid:s,content:a,merchant:r,reviser:"SYS",workplace:"SYSTEM"};c.userRequest({data:{req:"save cart",session:null,data:t},onResult:()=>{}}),n.redirect(`${u}/auth?cart=${s}`)})),a.get("/",(function(e,n){const s=l.resolve("public/index.html");n.sendFile(s,(function(e){e&&n.status(500).send(e)}))})),a.get("*",(function(e,n){const s=l.resolve("./_client/index.html");console.log("resolvedPath:",s),n.sendFile(s,(function(e){e&&n.status(500).send(e)}))})),o.on("connection",e=>{d.push(e),e.on("start session",(function(n){e.join(n.session),n.status="success",n.socketId=e.id,n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),console.log("Socket started the session",n.session),console.log("ROOMS:",d[0].adapter.rooms)})),e.on("end session",(function(n){n.status="success",n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),e.leave(n.session),console.log("Socket ended the session",n.session)})),e.on("disconnect",()=>{console.log("Got disconnect!");const n=d.indexOf(e);d.splice(n,1)}),e.on("onDataReceived",e=>{c.userRequest({data:e,onResult:E})})})}).call(this,"/")},function(e,n){e.exports=require("os")},function(e,n){e.exports=require("express")},function(e,n){e.exports=require("http")},function(e,n){e.exports=require("socket.io")},function(e,n){e.exports=require("dotenv")},function(e,n){e.exports=require("path")},function(e,n,s){const r=s(15),a=s(16),{v4:t}=s(1),o=s(4),i=s(6),u=s(23);let l=null;const c=e=>{let n;e.type="userRequest",n=u.process(e),console.log("processEvent response: ",n),!1!==n&&l(n)},d=e=>{console.log("onError: ",e),e.type="userRequest",res=i.process(e),!1!==res&&(console.log("emit onDataReceived: ",res),l(res))};e.exports={userRequest:e=>{data=e.data,l=e.onResult;const n=data.data;switch(data.req){case"get account data":o.getAccount({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid});break;case"dispatch daily allowance":o.transferV2U({req:"transfer V2U",session:data.session,reqData:n,onStatusChange:c,onError:d,recipient_id:n.uid});break;case"get transactions":o.getTransactions({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,language:n.language,dateStart:n.dateStart,dateEnd:n.dateEnd,search:n.search,page:n.page-1,limit:n.limit});break;case"get shares":o.getShares({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"sign in user":o.getUriSettings({req:"get uri settings",session:data.session,reqData:n,onStatusChange:c,onError:d,uri:n.uri}),o.signInUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,pw:n.password,ip:n.ip});break;case"register user":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,firstname:n.firstName,lastname:n.lastName,email:n.email,pw:n.password,language:n.language,validateEmail:n.validateEmail,reviser:n.reviser,workplace:n.workplace});break;case"change password":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"get user sequence":o.getSequence({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,birthdate:n.birthDate,timezone:n.timezone,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"register account":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,birthdate:n.birthDate,timezone:n.timezone,scode:n.scode,tcode:n.tcode,sequence:n.sequence,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"update user":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,newEmail:void 0===n.newEmail?null:n.newEmail,validateEmail:n.validateEmail,uid:n.personalID,firstname:n.firstName,lastname:n.lastName,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"validate email token":o.validateEmailToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,token:n.token,email:n.email});break;case"resend validate email token":o.resendValidateEmailToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,token:n.token,language:n.language});break;case"validate password reset token":o.validatePasswordResetToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,token:n.token,email:n.email});break;case"reset password":o.resetPassword({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,language:n.language});break;case"upload file":console.log("UPLOAD FILE DATA:",data);const e=n.acceptedFiles[0],s=data.session,i=global.appRoot+"/uploads/"+s,u=t();r.existsSync(i)||r.mkdirSync(i),a.fromBuffer(e).then(s=>{let a=s.ext;r.writeFile(i+"/"+u+"."+a,e,e=>{if(e)return console.log(e);o.uploadFile({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d})})});break;case"get user":o.getUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email});break;case"get currencies":o.getCurrencies({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,search:n.search,page:n.page-1,limit:n.limit});break;case"register user language":o.mergeUserLanguage({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,language:n.language});break;case"register user currency":o.mergeUserCurrency({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,currency_id:n.currency_id});break;case"validate session":o.getValidateSession({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d});break;case"get user businesses":o.getBusiness({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,page:n.page-1,limit:n.limit});break;case"get business purposes":o.getPurpose({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,business_id:n.business_id,language:n.language,search:n.search,page:n.page-1,limit:n.limit});break;case"get cart purposes":o.getCartPurposes({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purposes:n.purposes,language:n.language,page:n.page-1,limit:n.limit});break;case"get purpose shareholders":o.getShare({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purpose_id});break;case"get business by id":o.getBusinessById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,id:n.id});break;case"get purpose by id":o.getPurposeById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,id:n.id,language:n.language});break;case"get shareholder by id":o.getShareholderById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,id:n.id});break;case"get currency by id":o.getCurrencyById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,id:n.id});break;case"get transaction by id":o.getTransactionById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,id:n.id,language:n.language});break;case"register currency":o.mergeCurrency({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,curr_title:n.curr_title,abbr:n.curr_abbr,rate:n.curr_rate,region:n.curr_region,reviser:n.reviser,workplace:n.workplace});break;case"register business":o.mergeBusiness({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,title:n.businessTitle,description:n.businessDescription,reviser:n.reviser,workplace:n.workplace});break;case"register purpose":o.addPurpose({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:n.uid,language:n.language,business_id:n.businessID,title:n.purposeTitle,description:n.purposeDescription,category:n.purposeCategory,subcategory:n.purposeSubcategory,subcategory2:n.purposeSubcategory2,keywords:n.purposeKeywords,reviser:n.reviser,workplace:n.workplace});break;case"change purpose status":o.changePurposeStatus({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purpose_id,status:n.purpose_status,reviser:n.reviser,workplace:n.workplace});break;case"update purpose property":o.updatePurposeProps({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purposeID,title:n.purposeTitle,description:n.purposeDescription,category:n.purposeCategory,subcategory:n.purposeSubcategory,subcategory2:n.purposeSubcategory2,keywords:n.purposeKeywords,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"register shareholder":o.mergeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purposeID,shareholder_id:n.personalID,roles:n.shareholderRoles,share:n.shares,reviser:n.reviser,workplace:n.workplace});break;case"change share":o.mergeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,share:n.share,reviser:n.reviser,workplace:n.workplace});break;case"remove shareholder":o.removeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,reviser:n.reviser,workplace:n.workplace});break;case"send message":o.saveMessage({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,sender:n.sender,language:n.language,subject:n.subject,message:n.message,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2S":o.transferU2S({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,toAccount:n.toAccount,amount:n.amount,reviser:n.reviser,workplace:n.workplace});break;case"get cart":o.getCart({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,customer:n.customer,cart:n.cart});break;case"get tan":o.getTAN({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"submit tan":o.processTAN({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,email:n.email,tan:n.tan,reviser:n.reviser,workplace:n.workplace});break;case"save cart":o.saveCart({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,cartid:n.cartid,content:n.content,merchant:n.merchant,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2U":o.transferU2U({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,recipient_id:n.toPersonalID,amount:n.amount,description:n.description,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2B":o.transferU2B({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,purpose_id:n.purposeID,currency:n.currency,amount:n.amount,description:n.description,cart:void 0===n.cart?null:n.cart,merchant:void 0===n.merchant?null:n.merchant,reviser:n.reviser,workplace:n.workplace});break;case"end session":o.endSession({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,token:data.session});break;default:console.log("Unknown request: "+data.req),d({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:d,error:{code:"UNKNOWN_REQUEST"},context:["ProcessRequest.js","userRequest","switch default"],query:null})}}}},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("file-type")},function(e,n){e.exports=require("events")},function(e,n,s){const r=s(19),a=s(5),t=s(0);let o=null;const i=()=>{null===o&&(o=r.createPool({connectionLimit:1e3,host:t.db.host,user:t.db.user,password:t.db.password,database:t.db.database}),o.on("acquire",(function(e){console.log("Connection %d acquired",e.threadId)})),o.on("connection",(function(e){})),o.on("enqueue",(function(){console.log("Waiting for available connection slot")})),o.on("release",(function(e){console.log("Connection %d released",e.threadId)})))},u=e=>{let{queries:n,connection:s,onStatusChange:r,onError:t,req:o,reqData:i,session:l,email:c,tags:d,flags:E,queryCnt:p}=e;if(void 0===n[p])return s.commit(e=>{if(e)return s.rollback(()=>{t({req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","INSERT INTO log","connection.commit"]})});r({req:o,reqData:i,session:l,email:c,tags:d,status:"success"});try{s.release()}catch(e){console.log("On connection release error:",e)}}),!0;const S=n[p].sql,m=n[p].values,g="undefined"!==n[p].name?n[p].name:null,T=s.query(S,m);T.on("error",e=>s.rollback((function(){t({name:g,req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","connection.query"]})}))).on("fields",e=>{}).on("result",S=>{if(console.log("MERGE CONNECTION RESULT:",S),!(E&a.dbMergeFlags.ALLOW_UNCHANGED_ROWS)&&0===S.insertId&&0===S.changedRows&&0===S.affectedRows)return s.rollback((function(){t({name:g,req:o,reqData:i,session:l,error:{code:"NO_ROWS_CHANGED"},context:["db_model.js","mergeIntoDb","connection.rollback (1)"],query:T.sql})}));r({name:g,req:o,reqData:i,session:l,email:c,tags:d,queryCnt:p,results:S,status:"continue"}),p++,e.queryCnt=p,void 0!==n[p]&&(n[p].sql=n[p].sql.replace("[INSERT_ID]",S.insertId),e.queries=n),u(e)}).on("end",()=>{r({name:g,req:o,reqData:i,session:l,email:c,tags:d,queryCnt:p,status:"finished"})})};e.exports={mergeIntoDb:(e,n=2)=>{i();let s=e[0].req,r=void 0!==e[0].reqData?e[0].reqData:null,a=e[0].session,t=e[0].email,l=void 0!==e[0].tags?e[0].tags:null,c=(e[0].uid,e[0].onStatusChange),d=e[0].onError;o.getConnection((function(o,i){o?d({req:s,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","pool.getConnection"]}):i.beginTransaction((function(o){if(o)return void d({req:s,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","connection.beginTransaction"]});u({queries:e,connection:i,onStatusChange:c,onError:d,req:s,reqData:r,session:a,email:t,tags:l,flags:n,queryCnt:0})}))})),c({req:s,reqData:r,session:a,status:"pending"})},startDbConnection:i}},function(e,n){e.exports=require("mysql")},function(e,n){const s=e=>{const n=[2,1,2,5,7,1,2,1,2,5,7,1,2,2,5,7,1,2],s=e.split(""),r=[];s.forEach((e,s)=>{r.push(parseInt(e)*n[s])});const a=r.join("").split("");let t=0;return a.forEach(e=>{t+=parseInt(e)}),t%10};e.exports={getChecksum:s,validate:e=>{const n=e.slice(1),r=`${n.substr(0,2)}${n.substr(2,6)}${n.substr(8,1).toUpperCase().charCodeAt(0).toString().padStart(5,"0")}${parseInt(n.substr(9,4),16).toString().padStart(5,"0")}`;return parseInt(e.slice(-1))===s(r)}}},function(e,n){e.exports=require("object-hash")},function(e,n){e.exports=require("geoip-lite")},function(e,n,s){"use strict";const r=s(24),a=s(26),t=e=>e;e.exports={process:e=>{switch(e.type){case"userRequest":return"sign in user"===e.req&&"success"===e.status?a.saveToken(e.tags.email,e):"VALIDATE SESSION"===e.name&&"continue"===e.status?a.validateToken(e):"register user"!==e.req&&"update user"!==e.req&&"resend validate email token"!==e.req||"success"!==e.status?("get account data"===e.req&&e.status,"get tan"===e.req&&"success"===e.status||"reset password"===e.req&&"success"===e.status?null!==e.tags.token&&(r.send(e).catch(console.error),e):t(e)):null!==e.tags.token&&(r.send(e).catch(console.error),e)}return!1}}},function(e,n,s){"use strict";const r=s(25),a=s(0),t="Local-Currency.com";e.exports={send:e=>async function(e){let{token:n,email:s,language:o}=e.tags;const{req:i}=e;n=encodeURIComponent(n);const u=a.uri.ENDPOINT;let l=r.createTransport({host:"local-currency.com",port:465,secure:!0,auth:{user:"service@local-currency.com",pass:"hajgfd_36754_JSZDM"},tls:{rejectUnauthorized:!1}});l.verify((function(e,n){e?console.log(e):console.log("Server is ready to take our messages")}));let c,d="",E="",p="";switch(i){case"resend validate email token":case"register user":case"update user":"lv"===o?(d="Tava aktivizācijas saite",E=`\n          <p>Sveiki,</p>\n          \n          <p>lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${u}/validate-email?token=${n}&email=${s}">${u}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${t} komanda</p>\n        `,p=`\n        Sveiki,\n        \n\n\n        lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.\n        \n\n\n        ${u}/validate-email?token=${n}&email=${s}">${u}/validate-email?token=${n}&email=${s}\n        \n\n\n        Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.\n        \n\n\n        Paldies,\n        \n\n\n        Tava ${t} komanda\n        \n\n\n        `):(d="Your activation link",E=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to validate your email address.</p>\n          \n          <p>\n            <a href="${u}/validate-email?token=${n}&email=${s}">${u}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to validate your email address, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${t} team</p>\n        `,p=`\n          Hello,\n          \n\n\n          Follow this link to validate your email address.\n          \n\n\n          ${u}/validate-email?token=${n}&email=${s}">${u}/validate-email?token=${n}&email=${s}\n          \n\n\n          If you didn't ask to validate your email address, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${t} team\n          \n\n\n      `);break;case"get tan":"lv"===o?(d="Tavs pārskaitījuma numurs",E=`\n          <p>Sveiki,</p>\n          \n          <p>lai veiktu ${t} pārskaitījumu, izmanto šo numuru.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${t} komanda</p>\n        `,p=`\n          Sveiki,\n          \n\n\n          lai veiktu ${t} pārskaitījumu, izmanto šo numuru.\n          \n\n\n          \n            ${n}\n            \n\n\n          \n          Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.\n          \n\n\n          Paldies,\n          \n\n\n          Tava ${t} komanda\n          \n\n\n      `):(d="Your transaction number",E=`\n          <p>Hello,</p>\n          \n          <p>Use this TAN for your ${t} transfer.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>If you didn't whish to make a transfer, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${t} team</p>\n        `,p=`\n          Hello,\n          \n\n\n          Use this TAN for your ${t} transfer.\n          \n\n\n\n            ${n}\n            \n\n\n          \n          If you didn't whish to make a transfer, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${t} team\n          \n\n\n      `);break;case"reset password":"lv"===o?(d="Tava paroles atiestatīšanas saite",E=`\n          <p>Sveiki,</p>\n          \n          <p>lai atiestatītu savu ${t} paroli, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${u}/reset?token=${n}&email=${s}">${u}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ${t} komanda</p>\n        `,p=`\n        Sveiki,\n        \n\n\n        lai atiestatītu savu ${t} paroli, izmanto šo saiti.\n        \n\n\n        \n          ${u}/reset?token=${n}&email=${s}">${u}/reset?token=${n}&email=${s}\n          \n\n\n        \n        Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.\n        \n\n\n        Paldies,\n        \n\n\n        Tava ${t} komanda\n        \n\n\n      `):(d="Your password reset link",E=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to reset your ${t} password.</p>\n          \n          <p>\n            <a href="${u}/reset?token=${n}&email=${s}">${u}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to reset your password, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ${t} team</p>\n        `,p=`\n          Hello,\n          \n\n\n          Follow this link to reset your ${t} password.\n          \n\n\n          \n            ${u}/reset?token=${n}&email=${s}">${u}/reset?token=${n}&email=${s}\n            \n\n\n          \n          If you didn't ask to reset your password, you can ignore this email.\n          \n\n\n          Thanks,\n          \n\n\n          Your ${t} team\n          \n\n\n      `)}return c=await l.sendMail({from:'"Local Currency Service" <noreply@local-currency.com>',to:s,bcc:[`"${s}" <strazds@gmail.com>`],list:{unsubscribe:{url:"https://local-currency.com/unsubscribe?email="+s,comment:"Unsubscribe"}},subject:d,text:p,html:(e=>`\n    <!DOCTYPE html>\n    <html lang="en">\n      <head>\n        <meta charset="utf-8" />\n      </head>\n      <body>\n        ${e}\n      </body>\n    </html>\n    `)(E)}),console.log("Info:",c),!0}(e)}},function(e,n){e.exports=require("nodemailer")},function(e,n,s){const r=s(27),a=s(4),t=s(6),o=(e,n={})=>{if(null===e)return!1;const s=r.create(e);return n.token=s.token,a.mergeSession({req:"save session",session:s.token,reqData:null,onStatusChange:()=>{},onError:()=>{},email:e,token:s.token,iv:s.iv}),n};e.exports={saveToken:o,validateToken:e=>{const n=e.results.token,s=e.results.iv,a=e.results.email,{status:i,renew:u}=r.validate(n,s,a);return delete e.results.iv,i?(u&&(e=o(a,e)),e):(delete e.results,delete e.reqData,e.type="userRequest",e.error={code:"INVALID_SESSION"},e.socketAction={closeSocket:n},e.context=["ProcessEvent.js","process","utoken.validate failed"],t.process(e))}}},function(e,n,s){const r=s(0),a=s(2),t="PRODUCTION"===r.mode?900:21600,o=e=>a.hash(e).substr(0,8);e.exports={create:e=>{const n=o(e),s=Math.floor(Date.now()/1e3)+t,r=a.encrypt(`${n}${s}`,!0);return{iv:r.iv,token:r.encryptedData}},validate:(e,n,s)=>{const r=o(s),t=a.decrypt(e,n);let i=t.substr(0,8)===r;const u=t.substr(8),l=Math.floor((Date.now()/1e3-u)/1);return u<Date.now()/1e3&&(i=!1),{status:i,renew:-l<120}}}}]);